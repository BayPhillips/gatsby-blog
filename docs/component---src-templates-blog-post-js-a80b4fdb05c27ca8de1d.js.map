{"version":3,"sources":["webpack:///component---src-templates-blog-post-js-a80b4fdb05c27ca8de1d.js","webpack:///./~/fault/index.js","webpack:///./~/format/format.js","webpack:///./~/highlight.js/lib/highlight.js","webpack:///./~/highlight.js/lib/languages/javascript.js","webpack:///./~/lowlight/lib/core.js","webpack:///./~/react-syntax-highlighter/dist/create-element.js","webpack:///./~/react-syntax-highlighter/dist/highlight.js","webpack:///./~/react-syntax-highlighter/dist/languages/javascript.js","webpack:///./~/react-syntax-highlighter/dist/light.js","webpack:///./~/react-syntax-highlighter/dist/styles/docco.js","webpack:///./src/templates/blogPost.js"],"names":["webpackJsonp","296","module","exports","__webpack_require__","create","EConstructor","FormattedError","format","formatter","apply","arguments","displayName","name","fault","Error","eval","EvalError","range","RangeError","reference","ReferenceError","syntax","SyntaxError","type","TypeError","uri","URIError","309","printf","console","log","vsprintf","fmt","replacements","concat","c","arg","tmp","precision","argIndex","args","slice","call","i","n","length","result","escaped","leadingZero","nextArg","slurpNumber","digits","test","parseInt","toString","String","fromCharCode","parseFloat","toFixed","replace","JSON","stringify","toUpperCase","namespace","329","factory","window","self","hljs","escape","value","tag","node","nodeName","toLowerCase","testRe","re","lexeme","match","exec","index","isNotHighlighted","language","noHighlightRe","blockLanguage","block","_class","classes","className","parentNode","languagePrefixRe","getLanguage","split","inherit","parent","key","objects","Array","prototype","forEach","obj","nodeStream","_nodeStream","offset","child","firstChild","nextSibling","nodeType","nodeValue","push","event","mergeStreams","original","highlighted","selectStream","open","attr_str","a","ArrayProto","map","attributes","join","close","render","processed","nodeStack","stream","substring","reverse","splice","pop","substr","expand_mode","mode","variants","cached_variants","variant","endsWithParent","compileLanguage","reStr","source","langRe","global","RegExp","case_insensitive","compileMode","compiled","keywords","beginKeywords","compiled_keywords","flatten","str","kw","pair","Number","objectKeys","lexemesRe","lexemes","begin","beginRe","end","endRe","terminator_end","illegal","illegalRe","relevance","contains","starts","terminators","filter","Boolean","highlight","ignore_illegals","continuation","subMode","endOfMode","endsParent","isIllegal","keywordMatch","match_str","hasOwnProperty","buildSpan","classname","insideSpan","leaveOpen","noPrefix","classPrefix","options","openSpan","closeSpan","spanEndTag","processKeywords","keyword_match","last_index","top","mode_buffer","lastIndex","processSubLanguage","explicit","subLanguage","languages","continuations","highlightAuto","undefined","processBuffer","startNewMode","Object","processLexeme","buffer","new_mode","skip","excludeBegin","returnBegin","end_mode","origin","returnEnd","excludeEnd","current","count","e","message","indexOf","text","languageSubset","second_best","fixMarkup","tabReplace","useBR","fixMarkupRe","p1","buildClassName","prevClassName","currentLang","resultLang","aliases","trim","highlightBlock","originalStream","resultNode","document","createElementNS","innerHTML","textContent","configure","user_options","initHighlighting","called","blocks","querySelectorAll","initHighlightingOnLoad","addEventListener","registerLanguage","lang","alias","listLanguages","keys","IDENT_RE","UNDERSCORE_IDENT_RE","NUMBER_RE","C_NUMBER_RE","BINARY_NUMBER_RE","RE_STARTERS_RE","BACKSLASH_ESCAPE","APOS_STRING_MODE","QUOTE_STRING_MODE","PHRASAL_WORDS_MODE","COMMENT","inherits","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","HASH_COMMENT_MODE","NUMBER_MODE","C_NUMBER_MODE","BINARY_NUMBER_MODE","CSS_NUMBER_MODE","REGEXP_MODE","TITLE_MODE","UNDERSCORE_TITLE_MODE","METHOD_GUARD","330","KEYWORDS","keyword","literal","built_in","NUMBER","SUBST","TEMPLATE_STRING","PARAMS_CONTAINS","345","High","autoHighlight","secondBest","settings","subset","languageNames","prefix","defaultPrefix","normalize","coreHighlight","low","values","ignore","newMode","endMode","modeBuffer","addSiblings","currentChildren","addText","build","stack","children","subvalue","submatch","nodes","siblings","sibling","T_TEXT","tail","buildText","contents","T_ELEMENT","tagName","T_SPAN","properties","keyInsensitive","own","err","expandMode","keyCachedVariants","pairs","space","pipe","compiledKeywords","terminatorEnd","execNoop","expression","high","436","_interopRequireDefault","__esModule","default","createStyleObject","classNames","elementStyle","stylesheet","reduce","styleObject","_extends3","createClassNameString","createChildren","useInlineStyles","childrenCount","createElement","_ref","_ref$style","style","TagName","childrenCreator","props","_assign2","_react2","defineProperty","_assign","_extends2","_react","437","getNewLines","newLineRegex","getLineNumbers","lines","startingLineNumber","_","number","LineNumbers","_ref2","codeString","_ref2$containerStyle","containerStyle","float","paddingRight","_ref2$numberStyle","numberStyle","createLineElement","_ref3","lineNumber","lineStyle","_ref3$className","flattenCodeTree","tree","newTree","wrapLinesInSpan","codeTree","lastLineBreakIndex","_loop","newLines","splitValue","newChild","_children","stringChild","lastLineInPreviousSpan","newElem","defaultRenderer","_ref4","rows","_createElement2","_objectWithoutProperties2","_objectWithoutProperties3","lowlight","defaultStyle","_ref5","_ref5$style","_ref5$customStyle","customStyle","_ref5$codeTagProps","codeTagProps","_ref5$useInlineStyles","_ref5$showLineNumbers","showLineNumbers","_ref5$startingLineNum","lineNumberContainerStyle","lineNumberStyle","wrapLines","_ref5$lineStyle","renderer","_ref5$PreTag","PreTag","_ref5$CodeTag","CodeTag","_ref5$code","code","isArray","rest","defaultPreStyle","backgroundColor","preProps","lineNumbers","_createElement","438","_javascript","_javascript2","439","_highlight","_highlight2","_core","_core2","440","display","overflowX","padding","color","background","hljs-comment","fontStyle","hljs-quote","hljs-keyword","hljs-selector-tag","hljs-literal","hljs-subst","hljs-number","hljs-string","hljs-doctag","hljs-selector-id","hljs-selector-class","hljs-section","hljs-type","hljs-params","hljs-title","fontWeight","hljs-tag","hljs-name","hljs-attribute","hljs-variable","hljs-template-variable","hljs-regexp","hljs-link","hljs-symbol","hljs-bullet","hljs-built_in","hljs-builtin-name","hljs-meta","hljs-deletion","hljs-addition","hljs-emphasis","hljs-strong","207","_interopRequireWildcard","newObj","_classCallCheck","instance","Constructor","_possibleConstructorReturn","_inherits","subClass","superClass","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","pageQuery","_gatsbyLink","_propTypes","PropTypes","_light","_docco","js","propTypes","data","object","isRequired","BlogPostTemplate","_React$Component","this","blogPost","contentfulBlogPost","postTitle","datePosted","postContent","author","postSlug","contentPreview","alignItems","src","avatar","responsiveResolution","dangerouslySetInnerHTML","__html","childMarkdownRemark","html","React","Component"],"mappings":"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","file":"component---src-templates-blog-post-js-a80b4fdb05c27ca8de1d.js","sourcesContent":["webpackJsonp([107818501498521],{\n\n/***/ 296:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict'\n\t\n\tvar formatter = __webpack_require__(309)\n\t\n\tvar fault = create(Error)\n\t\n\tmodule.exports = fault\n\t\n\tfault.eval = create(EvalError)\n\tfault.range = create(RangeError)\n\tfault.reference = create(ReferenceError)\n\tfault.syntax = create(SyntaxError)\n\tfault.type = create(TypeError)\n\tfault.uri = create(URIError)\n\t\n\tfault.create = create\n\t\n\t/* Create a new `EConstructor`, with the formatted\n\t * `format` as a first argument. */\n\tfunction create(EConstructor) {\n\t  FormattedError.displayName = EConstructor.displayName || EConstructor.name\n\t\n\t  return FormattedError\n\t\n\t  function FormattedError(format) {\n\t    if (format) {\n\t      format = formatter.apply(null, arguments)\n\t    }\n\t\n\t    return new EConstructor(format)\n\t  }\n\t}\n\n\n/***/ }),\n\n/***/ 309:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t//\n\t// format - printf-like string formatting for JavaScript\n\t// github.com/samsonjs/format\n\t// @_sjs\n\t//\n\t// Copyright 2010 - 2013 Sami Samhuri <sami@samhuri.net>\n\t//\n\t// MIT License\n\t// http://sjs.mit-license.org\n\t//\n\t\n\t;(function() {\n\t\n\t  //// Export the API\n\t  var namespace;\n\t\n\t  // CommonJS / Node module\n\t  if (true) {\n\t    namespace = module.exports = format;\n\t  }\n\t\n\t  // Browsers and other environments\n\t  else {\n\t    // Get the global object. Works in ES3, ES5, and ES5 strict mode.\n\t    namespace = (function(){ return this || (1,eval)('this') }());\n\t  }\n\t\n\t  namespace.format = format;\n\t  namespace.vsprintf = vsprintf;\n\t\n\t  if (typeof console !== 'undefined' && typeof console.log === 'function') {\n\t    namespace.printf = printf;\n\t  }\n\t\n\t  function printf(/* ... */) {\n\t    console.log(format.apply(null, arguments));\n\t  }\n\t\n\t  function vsprintf(fmt, replacements) {\n\t    return format.apply(null, [fmt].concat(replacements));\n\t  }\n\t\n\t  function format(fmt) {\n\t    var argIndex = 1 // skip initial format argument\n\t      , args = [].slice.call(arguments)\n\t      , i = 0\n\t      , n = fmt.length\n\t      , result = ''\n\t      , c\n\t      , escaped = false\n\t      , arg\n\t      , tmp\n\t      , leadingZero = false\n\t      , precision\n\t      , nextArg = function() { return args[argIndex++]; }\n\t      , slurpNumber = function() {\n\t          var digits = '';\n\t          while (/\\d/.test(fmt[i])) {\n\t            digits += fmt[i++];\n\t            c = fmt[i];\n\t          }\n\t          return digits.length > 0 ? parseInt(digits) : null;\n\t        }\n\t      ;\n\t    for (; i < n; ++i) {\n\t      c = fmt[i];\n\t      if (escaped) {\n\t        escaped = false;\n\t        if (c == '.') {\n\t          leadingZero = false;\n\t          c = fmt[++i];\n\t        }\n\t        else if (c == '0' && fmt[i + 1] == '.') {\n\t          leadingZero = true;\n\t          i += 2;\n\t          c = fmt[i];\n\t        }\n\t        else {\n\t          leadingZero = true;\n\t        }\n\t        precision = slurpNumber();\n\t        switch (c) {\n\t        case 'b': // number in binary\n\t          result += parseInt(nextArg(), 10).toString(2);\n\t          break;\n\t        case 'c': // character\n\t          arg = nextArg();\n\t          if (typeof arg === 'string' || arg instanceof String)\n\t            result += arg;\n\t          else\n\t            result += String.fromCharCode(parseInt(arg, 10));\n\t          break;\n\t        case 'd': // number in decimal\n\t          result += parseInt(nextArg(), 10);\n\t          break;\n\t        case 'f': // floating point number\n\t          tmp = String(parseFloat(nextArg()).toFixed(precision || 6));\n\t          result += leadingZero ? tmp : tmp.replace(/^0/, '');\n\t          break;\n\t        case 'j': // JSON\n\t          result += JSON.stringify(nextArg());\n\t          break;\n\t        case 'o': // number in octal\n\t          result += '0' + parseInt(nextArg(), 10).toString(8);\n\t          break;\n\t        case 's': // string\n\t          result += nextArg();\n\t          break;\n\t        case 'x': // lowercase hexadecimal\n\t          result += '0x' + parseInt(nextArg(), 10).toString(16);\n\t          break;\n\t        case 'X': // uppercase hexadecimal\n\t          result += '0x' + parseInt(nextArg(), 10).toString(16).toUpperCase();\n\t          break;\n\t        default:\n\t          result += c;\n\t          break;\n\t        }\n\t      } else if (c === '%') {\n\t        escaped = true;\n\t      } else {\n\t        result += c;\n\t      }\n\t    }\n\t    return result;\n\t  }\n\t\n\t}());\n\n\n/***/ }),\n\n/***/ 329:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*\n\tSyntax highlighting with language autodetection.\n\thttps://highlightjs.org/\n\t*/\n\t\n\t(function(factory) {\n\t\n\t  // Find the global object for export to both the browser and web workers.\n\t  var globalObject = typeof window === 'object' && window ||\n\t                     typeof self === 'object' && self;\n\t\n\t  // Setup highlight.js for different environments. First is Node.js or\n\t  // CommonJS.\n\t  if(true) {\n\t    factory(exports);\n\t  } else if(globalObject) {\n\t    // Export hljs globally even when using AMD for cases when this script\n\t    // is loaded with others that may still expect a global hljs.\n\t    globalObject.hljs = factory({});\n\t\n\t    // Finally register the global hljs with AMD.\n\t    if(typeof define === 'function' && define.amd) {\n\t      define([], function() {\n\t        return globalObject.hljs;\n\t      });\n\t    }\n\t  }\n\t\n\t}(function(hljs) {\n\t  // Convenience variables for build-in objects\n\t  var ArrayProto = [],\n\t      objectKeys = Object.keys;\n\t\n\t  // Global internal variables used within the highlight.js library.\n\t  var languages = {},\n\t      aliases   = {};\n\t\n\t  // Regular expressions used throughout the highlight.js library.\n\t  var noHighlightRe    = /^(no-?highlight|plain|text)$/i,\n\t      languagePrefixRe = /\\blang(?:uage)?-([\\w-]+)\\b/i,\n\t      fixMarkupRe      = /((^(<[^>]+>|\\t|)+|(?:\\n)))/gm;\n\t\n\t  var spanEndTag = '</span>';\n\t\n\t  // Global options used when within external APIs. This is modified when\n\t  // calling the `hljs.configure` function.\n\t  var options = {\n\t    classPrefix: 'hljs-',\n\t    tabReplace: null,\n\t    useBR: false,\n\t    languages: undefined\n\t  };\n\t\n\t\n\t  /* Utility functions */\n\t\n\t  function escape(value) {\n\t    return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\t  }\n\t\n\t  function tag(node) {\n\t    return node.nodeName.toLowerCase();\n\t  }\n\t\n\t  function testRe(re, lexeme) {\n\t    var match = re && re.exec(lexeme);\n\t    return match && match.index === 0;\n\t  }\n\t\n\t  function isNotHighlighted(language) {\n\t    return noHighlightRe.test(language);\n\t  }\n\t\n\t  function blockLanguage(block) {\n\t    var i, match, length, _class;\n\t    var classes = block.className + ' ';\n\t\n\t    classes += block.parentNode ? block.parentNode.className : '';\n\t\n\t    // language-* takes precedence over non-prefixed class names.\n\t    match = languagePrefixRe.exec(classes);\n\t    if (match) {\n\t      return getLanguage(match[1]) ? match[1] : 'no-highlight';\n\t    }\n\t\n\t    classes = classes.split(/\\s+/);\n\t\n\t    for (i = 0, length = classes.length; i < length; i++) {\n\t      _class = classes[i]\n\t\n\t      if (isNotHighlighted(_class) || getLanguage(_class)) {\n\t        return _class;\n\t      }\n\t    }\n\t  }\n\t\n\t  function inherit(parent) {  // inherit(parent, override_obj, override_obj, ...)\n\t    var key;\n\t    var result = {};\n\t    var objects = Array.prototype.slice.call(arguments, 1);\n\t\n\t    for (key in parent)\n\t      result[key] = parent[key];\n\t    objects.forEach(function(obj) {\n\t      for (key in obj)\n\t        result[key] = obj[key];\n\t    });\n\t    return result;\n\t  }\n\t\n\t  /* Stream merging */\n\t\n\t  function nodeStream(node) {\n\t    var result = [];\n\t    (function _nodeStream(node, offset) {\n\t      for (var child = node.firstChild; child; child = child.nextSibling) {\n\t        if (child.nodeType === 3)\n\t          offset += child.nodeValue.length;\n\t        else if (child.nodeType === 1) {\n\t          result.push({\n\t            event: 'start',\n\t            offset: offset,\n\t            node: child\n\t          });\n\t          offset = _nodeStream(child, offset);\n\t          // Prevent void elements from having an end tag that would actually\n\t          // double them in the output. There are more void elements in HTML\n\t          // but we list only those realistically expected in code display.\n\t          if (!tag(child).match(/br|hr|img|input/)) {\n\t            result.push({\n\t              event: 'stop',\n\t              offset: offset,\n\t              node: child\n\t            });\n\t          }\n\t        }\n\t      }\n\t      return offset;\n\t    })(node, 0);\n\t    return result;\n\t  }\n\t\n\t  function mergeStreams(original, highlighted, value) {\n\t    var processed = 0;\n\t    var result = '';\n\t    var nodeStack = [];\n\t\n\t    function selectStream() {\n\t      if (!original.length || !highlighted.length) {\n\t        return original.length ? original : highlighted;\n\t      }\n\t      if (original[0].offset !== highlighted[0].offset) {\n\t        return (original[0].offset < highlighted[0].offset) ? original : highlighted;\n\t      }\n\t\n\t      /*\n\t      To avoid starting the stream just before it should stop the order is\n\t      ensured that original always starts first and closes last:\n\t\n\t      if (event1 == 'start' && event2 == 'start')\n\t        return original;\n\t      if (event1 == 'start' && event2 == 'stop')\n\t        return highlighted;\n\t      if (event1 == 'stop' && event2 == 'start')\n\t        return original;\n\t      if (event1 == 'stop' && event2 == 'stop')\n\t        return highlighted;\n\t\n\t      ... which is collapsed to:\n\t      */\n\t      return highlighted[0].event === 'start' ? original : highlighted;\n\t    }\n\t\n\t    function open(node) {\n\t      function attr_str(a) {return ' ' + a.nodeName + '=\"' + escape(a.value).replace('\"', '&quot;') + '\"';}\n\t      result += '<' + tag(node) + ArrayProto.map.call(node.attributes, attr_str).join('') + '>';\n\t    }\n\t\n\t    function close(node) {\n\t      result += '</' + tag(node) + '>';\n\t    }\n\t\n\t    function render(event) {\n\t      (event.event === 'start' ? open : close)(event.node);\n\t    }\n\t\n\t    while (original.length || highlighted.length) {\n\t      var stream = selectStream();\n\t      result += escape(value.substring(processed, stream[0].offset));\n\t      processed = stream[0].offset;\n\t      if (stream === original) {\n\t        /*\n\t        On any opening or closing tag of the original markup we first close\n\t        the entire highlighted node stack, then render the original tag along\n\t        with all the following original tags at the same offset and then\n\t        reopen all the tags on the highlighted stack.\n\t        */\n\t        nodeStack.reverse().forEach(close);\n\t        do {\n\t          render(stream.splice(0, 1)[0]);\n\t          stream = selectStream();\n\t        } while (stream === original && stream.length && stream[0].offset === processed);\n\t        nodeStack.reverse().forEach(open);\n\t      } else {\n\t        if (stream[0].event === 'start') {\n\t          nodeStack.push(stream[0].node);\n\t        } else {\n\t          nodeStack.pop();\n\t        }\n\t        render(stream.splice(0, 1)[0]);\n\t      }\n\t    }\n\t    return result + escape(value.substr(processed));\n\t  }\n\t\n\t  /* Initialization */\n\t\n\t  function expand_mode(mode) {\n\t    if (mode.variants && !mode.cached_variants) {\n\t      mode.cached_variants = mode.variants.map(function(variant) {\n\t        return inherit(mode, {variants: null}, variant);\n\t      });\n\t    }\n\t    return mode.cached_variants || (mode.endsWithParent && [inherit(mode)]) || [mode];\n\t  }\n\t\n\t  function compileLanguage(language) {\n\t\n\t    function reStr(re) {\n\t        return (re && re.source) || re;\n\t    }\n\t\n\t    function langRe(value, global) {\n\t      return new RegExp(\n\t        reStr(value),\n\t        'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : '')\n\t      );\n\t    }\n\t\n\t    function compileMode(mode, parent) {\n\t      if (mode.compiled)\n\t        return;\n\t      mode.compiled = true;\n\t\n\t      mode.keywords = mode.keywords || mode.beginKeywords;\n\t      if (mode.keywords) {\n\t        var compiled_keywords = {};\n\t\n\t        var flatten = function(className, str) {\n\t          if (language.case_insensitive) {\n\t            str = str.toLowerCase();\n\t          }\n\t          str.split(' ').forEach(function(kw) {\n\t            var pair = kw.split('|');\n\t            compiled_keywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1];\n\t          });\n\t        };\n\t\n\t        if (typeof mode.keywords === 'string') { // string\n\t          flatten('keyword', mode.keywords);\n\t        } else {\n\t          objectKeys(mode.keywords).forEach(function (className) {\n\t            flatten(className, mode.keywords[className]);\n\t          });\n\t        }\n\t        mode.keywords = compiled_keywords;\n\t      }\n\t      mode.lexemesRe = langRe(mode.lexemes || /\\w+/, true);\n\t\n\t      if (parent) {\n\t        if (mode.beginKeywords) {\n\t          mode.begin = '\\\\b(' + mode.beginKeywords.split(' ').join('|') + ')\\\\b';\n\t        }\n\t        if (!mode.begin)\n\t          mode.begin = /\\B|\\b/;\n\t        mode.beginRe = langRe(mode.begin);\n\t        if (!mode.end && !mode.endsWithParent)\n\t          mode.end = /\\B|\\b/;\n\t        if (mode.end)\n\t          mode.endRe = langRe(mode.end);\n\t        mode.terminator_end = reStr(mode.end) || '';\n\t        if (mode.endsWithParent && parent.terminator_end)\n\t          mode.terminator_end += (mode.end ? '|' : '') + parent.terminator_end;\n\t      }\n\t      if (mode.illegal)\n\t        mode.illegalRe = langRe(mode.illegal);\n\t      if (mode.relevance == null)\n\t        mode.relevance = 1;\n\t      if (!mode.contains) {\n\t        mode.contains = [];\n\t      }\n\t      mode.contains = Array.prototype.concat.apply([], mode.contains.map(function(c) {\n\t        return expand_mode(c === 'self' ? mode : c)\n\t      }));\n\t      mode.contains.forEach(function(c) {compileMode(c, mode);});\n\t\n\t      if (mode.starts) {\n\t        compileMode(mode.starts, parent);\n\t      }\n\t\n\t      var terminators =\n\t        mode.contains.map(function(c) {\n\t          return c.beginKeywords ? '\\\\.?(' + c.begin + ')\\\\.?' : c.begin;\n\t        })\n\t        .concat([mode.terminator_end, mode.illegal])\n\t        .map(reStr)\n\t        .filter(Boolean);\n\t      mode.terminators = terminators.length ? langRe(terminators.join('|'), true) : {exec: function(/*s*/) {return null;}};\n\t    }\n\t\n\t    compileMode(language);\n\t  }\n\t\n\t  /*\n\t  Core highlighting function. Accepts a language name, or an alias, and a\n\t  string with the code to highlight. Returns an object with the following\n\t  properties:\n\t\n\t  - relevance (int)\n\t  - value (an HTML string with highlighting markup)\n\t\n\t  */\n\t  function highlight(name, value, ignore_illegals, continuation) {\n\t\n\t    function subMode(lexeme, mode) {\n\t      var i, length;\n\t\n\t      for (i = 0, length = mode.contains.length; i < length; i++) {\n\t        if (testRe(mode.contains[i].beginRe, lexeme)) {\n\t          return mode.contains[i];\n\t        }\n\t      }\n\t    }\n\t\n\t    function endOfMode(mode, lexeme) {\n\t      if (testRe(mode.endRe, lexeme)) {\n\t        while (mode.endsParent && mode.parent) {\n\t          mode = mode.parent;\n\t        }\n\t        return mode;\n\t      }\n\t      if (mode.endsWithParent) {\n\t        return endOfMode(mode.parent, lexeme);\n\t      }\n\t    }\n\t\n\t    function isIllegal(lexeme, mode) {\n\t      return !ignore_illegals && testRe(mode.illegalRe, lexeme);\n\t    }\n\t\n\t    function keywordMatch(mode, match) {\n\t      var match_str = language.case_insensitive ? match[0].toLowerCase() : match[0];\n\t      return mode.keywords.hasOwnProperty(match_str) && mode.keywords[match_str];\n\t    }\n\t\n\t    function buildSpan(classname, insideSpan, leaveOpen, noPrefix) {\n\t      var classPrefix = noPrefix ? '' : options.classPrefix,\n\t          openSpan    = '<span class=\"' + classPrefix,\n\t          closeSpan   = leaveOpen ? '' : spanEndTag\n\t\n\t      openSpan += classname + '\">';\n\t\n\t      return openSpan + insideSpan + closeSpan;\n\t    }\n\t\n\t    function processKeywords() {\n\t      var keyword_match, last_index, match, result;\n\t\n\t      if (!top.keywords)\n\t        return escape(mode_buffer);\n\t\n\t      result = '';\n\t      last_index = 0;\n\t      top.lexemesRe.lastIndex = 0;\n\t      match = top.lexemesRe.exec(mode_buffer);\n\t\n\t      while (match) {\n\t        result += escape(mode_buffer.substring(last_index, match.index));\n\t        keyword_match = keywordMatch(top, match);\n\t        if (keyword_match) {\n\t          relevance += keyword_match[1];\n\t          result += buildSpan(keyword_match[0], escape(match[0]));\n\t        } else {\n\t          result += escape(match[0]);\n\t        }\n\t        last_index = top.lexemesRe.lastIndex;\n\t        match = top.lexemesRe.exec(mode_buffer);\n\t      }\n\t      return result + escape(mode_buffer.substr(last_index));\n\t    }\n\t\n\t    function processSubLanguage() {\n\t      var explicit = typeof top.subLanguage === 'string';\n\t      if (explicit && !languages[top.subLanguage]) {\n\t        return escape(mode_buffer);\n\t      }\n\t\n\t      var result = explicit ?\n\t                   highlight(top.subLanguage, mode_buffer, true, continuations[top.subLanguage]) :\n\t                   highlightAuto(mode_buffer, top.subLanguage.length ? top.subLanguage : undefined);\n\t\n\t      // Counting embedded language score towards the host language may be disabled\n\t      // with zeroing the containing mode relevance. Usecase in point is Markdown that\n\t      // allows XML everywhere and makes every XML snippet to have a much larger Markdown\n\t      // score.\n\t      if (top.relevance > 0) {\n\t        relevance += result.relevance;\n\t      }\n\t      if (explicit) {\n\t        continuations[top.subLanguage] = result.top;\n\t      }\n\t      return buildSpan(result.language, result.value, false, true);\n\t    }\n\t\n\t    function processBuffer() {\n\t      result += (top.subLanguage != null ? processSubLanguage() : processKeywords());\n\t      mode_buffer = '';\n\t    }\n\t\n\t    function startNewMode(mode) {\n\t      result += mode.className? buildSpan(mode.className, '', true): '';\n\t      top = Object.create(mode, {parent: {value: top}});\n\t    }\n\t\n\t    function processLexeme(buffer, lexeme) {\n\t\n\t      mode_buffer += buffer;\n\t\n\t      if (lexeme == null) {\n\t        processBuffer();\n\t        return 0;\n\t      }\n\t\n\t      var new_mode = subMode(lexeme, top);\n\t      if (new_mode) {\n\t        if (new_mode.skip) {\n\t          mode_buffer += lexeme;\n\t        } else {\n\t          if (new_mode.excludeBegin) {\n\t            mode_buffer += lexeme;\n\t          }\n\t          processBuffer();\n\t          if (!new_mode.returnBegin && !new_mode.excludeBegin) {\n\t            mode_buffer = lexeme;\n\t          }\n\t        }\n\t        startNewMode(new_mode, lexeme);\n\t        return new_mode.returnBegin ? 0 : lexeme.length;\n\t      }\n\t\n\t      var end_mode = endOfMode(top, lexeme);\n\t      if (end_mode) {\n\t        var origin = top;\n\t        if (origin.skip) {\n\t          mode_buffer += lexeme;\n\t        } else {\n\t          if (!(origin.returnEnd || origin.excludeEnd)) {\n\t            mode_buffer += lexeme;\n\t          }\n\t          processBuffer();\n\t          if (origin.excludeEnd) {\n\t            mode_buffer = lexeme;\n\t          }\n\t        }\n\t        do {\n\t          if (top.className) {\n\t            result += spanEndTag;\n\t          }\n\t          if (!top.skip) {\n\t            relevance += top.relevance;\n\t          }\n\t          top = top.parent;\n\t        } while (top !== end_mode.parent);\n\t        if (end_mode.starts) {\n\t          startNewMode(end_mode.starts, '');\n\t        }\n\t        return origin.returnEnd ? 0 : lexeme.length;\n\t      }\n\t\n\t      if (isIllegal(lexeme, top))\n\t        throw new Error('Illegal lexeme \"' + lexeme + '\" for mode \"' + (top.className || '<unnamed>') + '\"');\n\t\n\t      /*\n\t      Parser should not reach this point as all types of lexemes should be caught\n\t      earlier, but if it does due to some bug make sure it advances at least one\n\t      character forward to prevent infinite looping.\n\t      */\n\t      mode_buffer += lexeme;\n\t      return lexeme.length || 1;\n\t    }\n\t\n\t    var language = getLanguage(name);\n\t    if (!language) {\n\t      throw new Error('Unknown language: \"' + name + '\"');\n\t    }\n\t\n\t    compileLanguage(language);\n\t    var top = continuation || language;\n\t    var continuations = {}; // keep continuations for sub-languages\n\t    var result = '', current;\n\t    for(current = top; current !== language; current = current.parent) {\n\t      if (current.className) {\n\t        result = buildSpan(current.className, '', true) + result;\n\t      }\n\t    }\n\t    var mode_buffer = '';\n\t    var relevance = 0;\n\t    try {\n\t      var match, count, index = 0;\n\t      while (true) {\n\t        top.terminators.lastIndex = index;\n\t        match = top.terminators.exec(value);\n\t        if (!match)\n\t          break;\n\t        count = processLexeme(value.substring(index, match.index), match[0]);\n\t        index = match.index + count;\n\t      }\n\t      processLexeme(value.substr(index));\n\t      for(current = top; current.parent; current = current.parent) { // close dangling modes\n\t        if (current.className) {\n\t          result += spanEndTag;\n\t        }\n\t      }\n\t      return {\n\t        relevance: relevance,\n\t        value: result,\n\t        language: name,\n\t        top: top\n\t      };\n\t    } catch (e) {\n\t      if (e.message && e.message.indexOf('Illegal') !== -1) {\n\t        return {\n\t          relevance: 0,\n\t          value: escape(value)\n\t        };\n\t      } else {\n\t        throw e;\n\t      }\n\t    }\n\t  }\n\t\n\t  /*\n\t  Highlighting with language detection. Accepts a string with the code to\n\t  highlight. Returns an object with the following properties:\n\t\n\t  - language (detected language)\n\t  - relevance (int)\n\t  - value (an HTML string with highlighting markup)\n\t  - second_best (object with the same structure for second-best heuristically\n\t    detected language, may be absent)\n\t\n\t  */\n\t  function highlightAuto(text, languageSubset) {\n\t    languageSubset = languageSubset || options.languages || objectKeys(languages);\n\t    var result = {\n\t      relevance: 0,\n\t      value: escape(text)\n\t    };\n\t    var second_best = result;\n\t    languageSubset.filter(getLanguage).forEach(function(name) {\n\t      var current = highlight(name, text, false);\n\t      current.language = name;\n\t      if (current.relevance > second_best.relevance) {\n\t        second_best = current;\n\t      }\n\t      if (current.relevance > result.relevance) {\n\t        second_best = result;\n\t        result = current;\n\t      }\n\t    });\n\t    if (second_best.language) {\n\t      result.second_best = second_best;\n\t    }\n\t    return result;\n\t  }\n\t\n\t  /*\n\t  Post-processing of the highlighted markup:\n\t\n\t  - replace TABs with something more useful\n\t  - replace real line-breaks with '<br>' for non-pre containers\n\t\n\t  */\n\t  function fixMarkup(value) {\n\t    return !(options.tabReplace || options.useBR)\n\t      ? value\n\t      : value.replace(fixMarkupRe, function(match, p1) {\n\t          if (options.useBR && match === '\\n') {\n\t            return '<br>';\n\t          } else if (options.tabReplace) {\n\t            return p1.replace(/\\t/g, options.tabReplace);\n\t          }\n\t          return '';\n\t      });\n\t  }\n\t\n\t  function buildClassName(prevClassName, currentLang, resultLang) {\n\t    var language = currentLang ? aliases[currentLang] : resultLang,\n\t        result   = [prevClassName.trim()];\n\t\n\t    if (!prevClassName.match(/\\bhljs\\b/)) {\n\t      result.push('hljs');\n\t    }\n\t\n\t    if (prevClassName.indexOf(language) === -1) {\n\t      result.push(language);\n\t    }\n\t\n\t    return result.join(' ').trim();\n\t  }\n\t\n\t  /*\n\t  Applies highlighting to a DOM node containing code. Accepts a DOM node and\n\t  two optional parameters for fixMarkup.\n\t  */\n\t  function highlightBlock(block) {\n\t    var node, originalStream, result, resultNode, text;\n\t    var language = blockLanguage(block);\n\t\n\t    if (isNotHighlighted(language))\n\t        return;\n\t\n\t    if (options.useBR) {\n\t      node = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n\t      node.innerHTML = block.innerHTML.replace(/\\n/g, '').replace(/<br[ \\/]*>/g, '\\n');\n\t    } else {\n\t      node = block;\n\t    }\n\t    text = node.textContent;\n\t    result = language ? highlight(language, text, true) : highlightAuto(text);\n\t\n\t    originalStream = nodeStream(node);\n\t    if (originalStream.length) {\n\t      resultNode = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n\t      resultNode.innerHTML = result.value;\n\t      result.value = mergeStreams(originalStream, nodeStream(resultNode), text);\n\t    }\n\t    result.value = fixMarkup(result.value);\n\t\n\t    block.innerHTML = result.value;\n\t    block.className = buildClassName(block.className, language, result.language);\n\t    block.result = {\n\t      language: result.language,\n\t      re: result.relevance\n\t    };\n\t    if (result.second_best) {\n\t      block.second_best = {\n\t        language: result.second_best.language,\n\t        re: result.second_best.relevance\n\t      };\n\t    }\n\t  }\n\t\n\t  /*\n\t  Updates highlight.js global options with values passed in the form of an object.\n\t  */\n\t  function configure(user_options) {\n\t    options = inherit(options, user_options);\n\t  }\n\t\n\t  /*\n\t  Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\n\t  */\n\t  function initHighlighting() {\n\t    if (initHighlighting.called)\n\t      return;\n\t    initHighlighting.called = true;\n\t\n\t    var blocks = document.querySelectorAll('pre code');\n\t    ArrayProto.forEach.call(blocks, highlightBlock);\n\t  }\n\t\n\t  /*\n\t  Attaches highlighting to the page load event.\n\t  */\n\t  function initHighlightingOnLoad() {\n\t    addEventListener('DOMContentLoaded', initHighlighting, false);\n\t    addEventListener('load', initHighlighting, false);\n\t  }\n\t\n\t  function registerLanguage(name, language) {\n\t    var lang = languages[name] = language(hljs);\n\t    if (lang.aliases) {\n\t      lang.aliases.forEach(function(alias) {aliases[alias] = name;});\n\t    }\n\t  }\n\t\n\t  function listLanguages() {\n\t    return objectKeys(languages);\n\t  }\n\t\n\t  function getLanguage(name) {\n\t    name = (name || '').toLowerCase();\n\t    return languages[name] || languages[aliases[name]];\n\t  }\n\t\n\t  /* Interface definition */\n\t\n\t  hljs.highlight = highlight;\n\t  hljs.highlightAuto = highlightAuto;\n\t  hljs.fixMarkup = fixMarkup;\n\t  hljs.highlightBlock = highlightBlock;\n\t  hljs.configure = configure;\n\t  hljs.initHighlighting = initHighlighting;\n\t  hljs.initHighlightingOnLoad = initHighlightingOnLoad;\n\t  hljs.registerLanguage = registerLanguage;\n\t  hljs.listLanguages = listLanguages;\n\t  hljs.getLanguage = getLanguage;\n\t  hljs.inherit = inherit;\n\t\n\t  // Common regexps\n\t  hljs.IDENT_RE = '[a-zA-Z]\\\\w*';\n\t  hljs.UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\\\w*';\n\t  hljs.NUMBER_RE = '\\\\b\\\\d+(\\\\.\\\\d+)?';\n\t  hljs.C_NUMBER_RE = '(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)'; // 0x..., 0..., decimal, float\n\t  hljs.BINARY_NUMBER_RE = '\\\\b(0b[01]+)'; // 0b...\n\t  hljs.RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~';\n\t\n\t  // Common modes\n\t  hljs.BACKSLASH_ESCAPE = {\n\t    begin: '\\\\\\\\[\\\\s\\\\S]', relevance: 0\n\t  };\n\t  hljs.APOS_STRING_MODE = {\n\t    className: 'string',\n\t    begin: '\\'', end: '\\'',\n\t    illegal: '\\\\n',\n\t    contains: [hljs.BACKSLASH_ESCAPE]\n\t  };\n\t  hljs.QUOTE_STRING_MODE = {\n\t    className: 'string',\n\t    begin: '\"', end: '\"',\n\t    illegal: '\\\\n',\n\t    contains: [hljs.BACKSLASH_ESCAPE]\n\t  };\n\t  hljs.PHRASAL_WORDS_MODE = {\n\t    begin: /\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/\n\t  };\n\t  hljs.COMMENT = function (begin, end, inherits) {\n\t    var mode = hljs.inherit(\n\t      {\n\t        className: 'comment',\n\t        begin: begin, end: end,\n\t        contains: []\n\t      },\n\t      inherits || {}\n\t    );\n\t    mode.contains.push(hljs.PHRASAL_WORDS_MODE);\n\t    mode.contains.push({\n\t      className: 'doctag',\n\t      begin: '(?:TODO|FIXME|NOTE|BUG|XXX):',\n\t      relevance: 0\n\t    });\n\t    return mode;\n\t  };\n\t  hljs.C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$');\n\t  hljs.C_BLOCK_COMMENT_MODE = hljs.COMMENT('/\\\\*', '\\\\*/');\n\t  hljs.HASH_COMMENT_MODE = hljs.COMMENT('#', '$');\n\t  hljs.NUMBER_MODE = {\n\t    className: 'number',\n\t    begin: hljs.NUMBER_RE,\n\t    relevance: 0\n\t  };\n\t  hljs.C_NUMBER_MODE = {\n\t    className: 'number',\n\t    begin: hljs.C_NUMBER_RE,\n\t    relevance: 0\n\t  };\n\t  hljs.BINARY_NUMBER_MODE = {\n\t    className: 'number',\n\t    begin: hljs.BINARY_NUMBER_RE,\n\t    relevance: 0\n\t  };\n\t  hljs.CSS_NUMBER_MODE = {\n\t    className: 'number',\n\t    begin: hljs.NUMBER_RE + '(' +\n\t      '%|em|ex|ch|rem'  +\n\t      '|vw|vh|vmin|vmax' +\n\t      '|cm|mm|in|pt|pc|px' +\n\t      '|deg|grad|rad|turn' +\n\t      '|s|ms' +\n\t      '|Hz|kHz' +\n\t      '|dpi|dpcm|dppx' +\n\t      ')?',\n\t    relevance: 0\n\t  };\n\t  hljs.REGEXP_MODE = {\n\t    className: 'regexp',\n\t    begin: /\\//, end: /\\/[gimuy]*/,\n\t    illegal: /\\n/,\n\t    contains: [\n\t      hljs.BACKSLASH_ESCAPE,\n\t      {\n\t        begin: /\\[/, end: /\\]/,\n\t        relevance: 0,\n\t        contains: [hljs.BACKSLASH_ESCAPE]\n\t      }\n\t    ]\n\t  };\n\t  hljs.TITLE_MODE = {\n\t    className: 'title',\n\t    begin: hljs.IDENT_RE,\n\t    relevance: 0\n\t  };\n\t  hljs.UNDERSCORE_TITLE_MODE = {\n\t    className: 'title',\n\t    begin: hljs.UNDERSCORE_IDENT_RE,\n\t    relevance: 0\n\t  };\n\t  hljs.METHOD_GUARD = {\n\t    // excludes method names from keyword processing\n\t    begin: '\\\\.\\\\s*' + hljs.UNDERSCORE_IDENT_RE,\n\t    relevance: 0\n\t  };\n\t\n\t  return hljs;\n\t}));\n\n\n/***/ }),\n\n/***/ 330:\n/***/ (function(module, exports) {\n\n\tmodule.exports = function(hljs) {\n\t  var IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';\n\t  var KEYWORDS = {\n\t    keyword:\n\t      'in of if for while finally var new function do return void else break catch ' +\n\t      'instanceof with throw case default try this switch continue typeof delete ' +\n\t      'let yield const export super debugger as async await static ' +\n\t      // ECMAScript 6 modules import\n\t      'import from as'\n\t    ,\n\t    literal:\n\t      'true false null undefined NaN Infinity',\n\t    built_in:\n\t      'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' +\n\t      'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' +\n\t      'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' +\n\t      'TypeError URIError Number Math Date String RegExp Array Float32Array ' +\n\t      'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' +\n\t      'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' +\n\t      'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect ' +\n\t      'Promise'\n\t  };\n\t  var EXPRESSIONS;\n\t  var NUMBER = {\n\t    className: 'number',\n\t    variants: [\n\t      { begin: '\\\\b(0[bB][01]+)' },\n\t      { begin: '\\\\b(0[oO][0-7]+)' },\n\t      { begin: hljs.C_NUMBER_RE }\n\t    ],\n\t    relevance: 0\n\t  };\n\t  var SUBST = {\n\t    className: 'subst',\n\t    begin: '\\\\$\\\\{', end: '\\\\}',\n\t    keywords: KEYWORDS,\n\t    contains: []  // defined later\n\t  };\n\t  var TEMPLATE_STRING = {\n\t    className: 'string',\n\t    begin: '`', end: '`',\n\t    contains: [\n\t      hljs.BACKSLASH_ESCAPE,\n\t      SUBST\n\t    ]\n\t  };\n\t  SUBST.contains = [\n\t    hljs.APOS_STRING_MODE,\n\t    hljs.QUOTE_STRING_MODE,\n\t    TEMPLATE_STRING,\n\t    NUMBER,\n\t    hljs.REGEXP_MODE\n\t  ]\n\t  var PARAMS_CONTAINS = SUBST.contains.concat([\n\t    hljs.C_BLOCK_COMMENT_MODE,\n\t    hljs.C_LINE_COMMENT_MODE\n\t  ]);\n\t\n\t  return {\n\t    aliases: ['js', 'jsx'],\n\t    keywords: KEYWORDS,\n\t    contains: [\n\t      {\n\t        className: 'meta',\n\t        relevance: 10,\n\t        begin: /^\\s*['\"]use (strict|asm)['\"]/\n\t      },\n\t      {\n\t        className: 'meta',\n\t        begin: /^#!/, end: /$/\n\t      },\n\t      hljs.APOS_STRING_MODE,\n\t      hljs.QUOTE_STRING_MODE,\n\t      TEMPLATE_STRING,\n\t      hljs.C_LINE_COMMENT_MODE,\n\t      hljs.C_BLOCK_COMMENT_MODE,\n\t      NUMBER,\n\t      { // object attr container\n\t        begin: /[{,]\\s*/, relevance: 0,\n\t        contains: [\n\t          {\n\t            begin: IDENT_RE + '\\\\s*:', returnBegin: true,\n\t            relevance: 0,\n\t            contains: [{className: 'attr', begin: IDENT_RE, relevance: 0}]\n\t          }\n\t        ]\n\t      },\n\t      { // \"value\" container\n\t        begin: '(' + hljs.RE_STARTERS_RE + '|\\\\b(case|return|throw)\\\\b)\\\\s*',\n\t        keywords: 'return throw case',\n\t        contains: [\n\t          hljs.C_LINE_COMMENT_MODE,\n\t          hljs.C_BLOCK_COMMENT_MODE,\n\t          hljs.REGEXP_MODE,\n\t          {\n\t            className: 'function',\n\t            begin: '(\\\\(.*?\\\\)|' + IDENT_RE + ')\\\\s*=>', returnBegin: true,\n\t            end: '\\\\s*=>',\n\t            contains: [\n\t              {\n\t                className: 'params',\n\t                variants: [\n\t                  {\n\t                    begin: IDENT_RE\n\t                  },\n\t                  {\n\t                    begin: /\\(\\s*\\)/,\n\t                  },\n\t                  {\n\t                    begin: /\\(/, end: /\\)/,\n\t                    excludeBegin: true, excludeEnd: true,\n\t                    keywords: KEYWORDS,\n\t                    contains: PARAMS_CONTAINS\n\t                  }\n\t                ]\n\t              }\n\t            ]\n\t          },\n\t          { // E4X / JSX\n\t            begin: /</, end: /(\\/\\w+|\\w+\\/)>/,\n\t            subLanguage: 'xml',\n\t            contains: [\n\t              {begin: /<\\w+\\s*\\/>/, skip: true},\n\t              {\n\t                begin: /<\\w+/, end: /(\\/\\w+|\\w+\\/)>/, skip: true,\n\t                contains: [\n\t                  {begin: /<\\w+\\s*\\/>/, skip: true},\n\t                  'self'\n\t                ]\n\t              }\n\t            ]\n\t          }\n\t        ],\n\t        relevance: 0\n\t      },\n\t      {\n\t        className: 'function',\n\t        beginKeywords: 'function', end: /\\{/, excludeEnd: true,\n\t        contains: [\n\t          hljs.inherit(hljs.TITLE_MODE, {begin: IDENT_RE}),\n\t          {\n\t            className: 'params',\n\t            begin: /\\(/, end: /\\)/,\n\t            excludeBegin: true,\n\t            excludeEnd: true,\n\t            contains: PARAMS_CONTAINS\n\t          }\n\t        ],\n\t        illegal: /\\[|%/\n\t      },\n\t      {\n\t        begin: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n\t      },\n\t      hljs.METHOD_GUARD,\n\t      { // ES6 class\n\t        className: 'class',\n\t        beginKeywords: 'class', end: /[{;=]/, excludeEnd: true,\n\t        illegal: /[:\"\\[\\]]/,\n\t        contains: [\n\t          {beginKeywords: 'extends'},\n\t          hljs.UNDERSCORE_TITLE_MODE\n\t        ]\n\t      },\n\t      {\n\t        beginKeywords: 'constructor', end: /\\{/, excludeEnd: true\n\t      }\n\t    ],\n\t    illegal: /#(?!!)/\n\t  };\n\t};\n\n/***/ }),\n\n/***/ 345:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict'\n\t\n\tvar high = __webpack_require__(329)\n\tvar fault = __webpack_require__(296)\n\t\n\t/* The lowlight interface, which has to be compatible\n\t * with highlight.js, as this object is passed to\n\t * highlight.js syntaxes. */\n\t\n\tfunction High() {}\n\t\n\tHigh.prototype = high\n\t\n\t/* Expose. */\n\tvar low = new High() // Ha!\n\t\n\tmodule.exports = low\n\t\n\tlow.highlight = highlight\n\tlow.highlightAuto = autoHighlight\n\tlow.registerLanguage = registerLanguage\n\tlow.getLanguage = getLanguage\n\t\n\tvar inherit = high.inherit\n\tvar own = {}.hasOwnProperty\n\tvar concat = [].concat\n\t\n\tvar defaultPrefix = 'hljs-'\n\tvar keyInsensitive = 'case_insensitive'\n\tvar keyCachedVariants = 'cached_variants'\n\tvar space = ' '\n\tvar pipe = '|'\n\t\n\tvar T_ELEMENT = 'element'\n\tvar T_TEXT = 'text'\n\tvar T_SPAN = 'span'\n\t\n\t/* Maps of syntaxes. */\n\tvar languageNames = []\n\tvar languages = {}\n\tvar aliases = {}\n\t\n\t/* Highlighting with language detection.  Accepts a string\n\t * with the code to highlight.  Returns an object with the\n\t * following properties:\n\t *\n\t * - language (detected language)\n\t * - relevance (int)\n\t * - value (a HAST tree with highlighting markup)\n\t * - secondBest (object with the same structure for\n\t *   second-best heuristically detected language, may\n\t *   be absent) */\n\tfunction autoHighlight(value, options) {\n\t  var settings = options || {}\n\t  var subset = settings.subset || languageNames\n\t  var prefix = settings.prefix\n\t  var length = subset.length\n\t  var index = -1\n\t  var result\n\t  var secondBest\n\t  var current\n\t  var name\n\t\n\t  if (prefix === null || prefix === undefined) {\n\t    prefix = defaultPrefix\n\t  }\n\t\n\t  if (typeof value !== 'string') {\n\t    throw fault('Expected `string` for value, got `%s`', value)\n\t  }\n\t\n\t  secondBest = normalize({})\n\t  result = normalize({})\n\t\n\t  while (++index < length) {\n\t    name = subset[index]\n\t\n\t    if (!getLanguage(name)) {\n\t      continue\n\t    }\n\t\n\t    current = normalize(coreHighlight(name, value, false, prefix))\n\t\n\t    current.language = name\n\t\n\t    if (current.relevance > secondBest.relevance) {\n\t      secondBest = current\n\t    }\n\t\n\t    if (current.relevance > result.relevance) {\n\t      secondBest = result\n\t      result = current\n\t    }\n\t  }\n\t\n\t  if (secondBest.language) {\n\t    result.secondBest = secondBest\n\t  }\n\t\n\t  return result\n\t}\n\t\n\t/* Highlighting `value` in the language `language`. */\n\tfunction highlight(language, value, options) {\n\t  var settings = options || {}\n\t  var prefix = settings.prefix\n\t\n\t  if (prefix === null || prefix === undefined) {\n\t    prefix = defaultPrefix\n\t  }\n\t\n\t  return normalize(coreHighlight(language, value, true, prefix))\n\t}\n\t\n\t/* Register a language. */\n\tfunction registerLanguage(name, syntax) {\n\t  var lang = syntax(low)\n\t  var values = lang.aliases\n\t  var length = values && values.length\n\t  var index = -1\n\t\n\t  languages[name] = lang\n\t\n\t  languageNames.push(name)\n\t\n\t  while (++index < length) {\n\t    aliases[values[index]] = name\n\t  }\n\t}\n\t\n\t/* Core highlighting function.  Accepts a language name, or\n\t * an alias, and a string with the code to highlight.\n\t * Returns an object with the following properties: */\n\tfunction coreHighlight(name, value, ignore, prefix, continuation) {\n\t  var continuations = {}\n\t  var stack = []\n\t  var modeBuffer = ''\n\t  var relevance = 0\n\t  var language\n\t  var top\n\t  var current\n\t  var currentChildren\n\t  var offset\n\t  var count\n\t  var match\n\t  var children\n\t\n\t  if (typeof name !== 'string') {\n\t    throw fault('Expected `string` for name, got `%s`', name)\n\t  }\n\t\n\t  if (typeof value !== 'string') {\n\t    throw fault('Expected `string` for value, got `%s`', value)\n\t  }\n\t\n\t  language = getLanguage(name)\n\t  top = continuation || language\n\t  children = []\n\t\n\t  current = top\n\t  currentChildren = children\n\t\n\t  if (!language) {\n\t    throw fault('Unknown language: `%s` is not registered', name)\n\t  }\n\t\n\t  compileLanguage(language)\n\t\n\t  try {\n\t    top.terminators.lastIndex = 0\n\t    offset = 0\n\t    match = top.terminators.exec(value)\n\t\n\t    while (match) {\n\t      count = processLexeme(value.substring(offset, match.index), match[0])\n\t      offset = match.index + count\n\t      top.terminators.lastIndex = offset\n\t      match = top.terminators.exec(value)\n\t    }\n\t\n\t    processLexeme(value.substr(offset))\n\t    current = top\n\t\n\t    while (current.parent) {\n\t      if (current.className) {\n\t        pop()\n\t      }\n\t\n\t      current = current.parent\n\t    }\n\t\n\t    return {\n\t      relevance: relevance,\n\t      value: currentChildren,\n\t      language: name,\n\t      top: top\n\t    }\n\t  } catch (err) {\n\t    /* istanbul ignore if - Catch-all  */\n\t    if (err.message.indexOf('Illegal') === -1) {\n\t      throw err\n\t    }\n\t\n\t    return {relevance: 0, value: addText(value, [])}\n\t  }\n\t\n\t  /* Process a lexeme.  Returns next position. */\n\t  function processLexeme(buffer, lexeme) {\n\t    var newMode\n\t    var endMode\n\t    var origin\n\t\n\t    modeBuffer += buffer\n\t\n\t    if (lexeme === undefined) {\n\t      addSiblings(processBuffer(), currentChildren)\n\t\n\t      return 0\n\t    }\n\t\n\t    newMode = subMode(lexeme, top)\n\t\n\t    if (newMode) {\n\t      addSiblings(processBuffer(), currentChildren)\n\t\n\t      startNewMode(newMode, lexeme)\n\t\n\t      return newMode.returnBegin ? 0 : lexeme.length\n\t    }\n\t\n\t    endMode = endOfMode(top, lexeme)\n\t\n\t    if (endMode) {\n\t      origin = top\n\t\n\t      if (!(origin.returnEnd || origin.excludeEnd)) {\n\t        modeBuffer += lexeme\n\t      }\n\t\n\t      addSiblings(processBuffer(), currentChildren)\n\t\n\t      /* Close open modes. */\n\t      do {\n\t        if (top.className) {\n\t          pop()\n\t        }\n\t\n\t        relevance += top.relevance\n\t        top = top.parent\n\t      } while (top !== endMode.parent)\n\t\n\t      if (origin.excludeEnd) {\n\t        addText(lexeme, currentChildren)\n\t      }\n\t\n\t      modeBuffer = ''\n\t\n\t      if (endMode.starts) {\n\t        startNewMode(endMode.starts, '')\n\t      }\n\t\n\t      return origin.returnEnd ? 0 : lexeme.length\n\t    }\n\t\n\t    if (isIllegal(lexeme, top)) {\n\t      throw fault(\n\t        'Illegal lexeme \"%s\" for mode \"%s\"',\n\t        lexeme,\n\t        top.className || '<unnamed>'\n\t      )\n\t    }\n\t\n\t    /* Parser should not reach this point as all\n\t     * types of lexemes should be caught earlier,\n\t     * but if it does due to some bug make sure it\n\t     * advances at least one character forward to\n\t     * prevent infinite looping. */\n\t    modeBuffer += lexeme\n\t\n\t    return lexeme.length || /* istanbul ignore next */ 1\n\t  }\n\t\n\t  /* Start a new mode with a `lexeme` to process. */\n\t  function startNewMode(mode, lexeme) {\n\t    var node\n\t\n\t    if (mode.className) {\n\t      node = build(mode.className, [])\n\t    }\n\t\n\t    if (mode.returnBegin) {\n\t      modeBuffer = ''\n\t    } else if (mode.excludeBegin) {\n\t      addText(lexeme, currentChildren)\n\t\n\t      modeBuffer = ''\n\t    } else {\n\t      modeBuffer = lexeme\n\t    }\n\t\n\t    /* Enter a new mode. */\n\t    if (node) {\n\t      currentChildren.push(node)\n\t      stack.push(currentChildren)\n\t      currentChildren = node.children\n\t    }\n\t\n\t    top = Object.create(mode, {parent: {value: top}})\n\t  }\n\t\n\t  /* Process the buffer. */\n\t  function processBuffer() {\n\t    var result = top.subLanguage ? processSubLanguage() : processKeywords()\n\t    modeBuffer = ''\n\t    return result\n\t  }\n\t\n\t  /* Process a sublanguage (returns a list of nodes). */\n\t  function processSubLanguage() {\n\t    var explicit = typeof top.subLanguage === 'string'\n\t    var subvalue\n\t\n\t    /* istanbul ignore if - support non-loaded sublanguages */\n\t    if (explicit && !languages[top.subLanguage]) {\n\t      return addText(modeBuffer, [])\n\t    }\n\t\n\t    if (explicit) {\n\t      subvalue = coreHighlight(\n\t        top.subLanguage,\n\t        modeBuffer,\n\t        true,\n\t        prefix,\n\t        continuations[top.subLanguage]\n\t      )\n\t    } else {\n\t      subvalue = autoHighlight(modeBuffer, {\n\t        subset: top.subLanguage.length ? top.subLanguage : undefined,\n\t        prefix: prefix\n\t      })\n\t    }\n\t\n\t    /* Counting embedded language score towards the\n\t     * host language may be disabled with zeroing the\n\t     * containing mode relevance.  Usecase in point is\n\t     * Markdown that allows XML everywhere and makes\n\t     * every XML snippet to have a much larger Markdown\n\t     * score. */\n\t    if (top.relevance > 0) {\n\t      relevance += subvalue.relevance\n\t    }\n\t\n\t    if (explicit) {\n\t      continuations[top.subLanguage] = subvalue.top\n\t    }\n\t\n\t    return [build(subvalue.language, subvalue.value, true)]\n\t  }\n\t\n\t  /* Process keywords. Returns nodes. */\n\t  function processKeywords() {\n\t    var nodes = []\n\t    var lastIndex\n\t    var keyword\n\t    var node\n\t    var submatch\n\t\n\t    if (!top.keywords) {\n\t      return addText(modeBuffer, nodes)\n\t    }\n\t\n\t    lastIndex = 0\n\t\n\t    top.lexemesRe.lastIndex = 0\n\t\n\t    keyword = top.lexemesRe.exec(modeBuffer)\n\t\n\t    while (keyword) {\n\t      addText(modeBuffer.substring(lastIndex, keyword.index), nodes)\n\t\n\t      submatch = keywordMatch(top, keyword)\n\t\n\t      if (submatch) {\n\t        relevance += submatch[1]\n\t\n\t        node = build(submatch[0], [])\n\t\n\t        nodes.push(node)\n\t\n\t        addText(keyword[0], node.children)\n\t      } else {\n\t        addText(keyword[0], nodes)\n\t      }\n\t\n\t      lastIndex = top.lexemesRe.lastIndex\n\t      keyword = top.lexemesRe.exec(modeBuffer)\n\t    }\n\t\n\t    addText(modeBuffer.substr(lastIndex), nodes)\n\t\n\t    return nodes\n\t  }\n\t\n\t  /* Add siblings. */\n\t  function addSiblings(siblings, nodes) {\n\t    var length = siblings.length\n\t    var index = -1\n\t    var sibling\n\t\n\t    while (++index < length) {\n\t      sibling = siblings[index]\n\t\n\t      if (sibling.type === T_TEXT) {\n\t        addText(sibling.value, nodes)\n\t      } else {\n\t        nodes.push(sibling)\n\t      }\n\t    }\n\t  }\n\t\n\t  /* Add a text. */\n\t  function addText(value, nodes) {\n\t    var tail\n\t\n\t    if (value) {\n\t      tail = nodes[nodes.length - 1]\n\t\n\t      if (tail && tail.type === T_TEXT) {\n\t        tail.value += value\n\t      } else {\n\t        nodes.push(buildText(value))\n\t      }\n\t    }\n\t\n\t    return nodes\n\t  }\n\t\n\t  /* Build a text. */\n\t  function buildText(value) {\n\t    return {type: T_TEXT, value: value}\n\t  }\n\t\n\t  /* Build a span. */\n\t  function build(name, contents, noPrefix) {\n\t    return {\n\t      type: T_ELEMENT,\n\t      tagName: T_SPAN,\n\t      properties: {\n\t        className: [(noPrefix ? '' : prefix) + name]\n\t      },\n\t      children: contents\n\t    }\n\t  }\n\t\n\t  /* Check if the first word in `keywords` is a keyword. */\n\t  function keywordMatch(mode, keywords) {\n\t    var keyword = keywords[0]\n\t\n\t    if (language[keyInsensitive]) {\n\t      keyword = keyword.toLowerCase()\n\t    }\n\t\n\t    return own.call(mode.keywords, keyword) && mode.keywords[keyword]\n\t  }\n\t\n\t  /* Check if `lexeme` is illegal according to `mode`. */\n\t  function isIllegal(lexeme, mode) {\n\t    return !ignore && test(mode.illegalRe, lexeme)\n\t  }\n\t\n\t  /* Check if `lexeme` ends `mode`. */\n\t  function endOfMode(mode, lexeme) {\n\t    if (test(mode.endRe, lexeme)) {\n\t      while (mode.endsParent && mode.parent) {\n\t        mode = mode.parent\n\t      }\n\t\n\t      return mode\n\t    }\n\t\n\t    if (mode.endsWithParent) {\n\t      return endOfMode(mode.parent, lexeme)\n\t    }\n\t  }\n\t\n\t  /* Check a sub-mode. */\n\t  function subMode(lexeme, mode) {\n\t    var values = mode.contains\n\t    var length = values.length\n\t    var index = -1\n\t\n\t    while (++index < length) {\n\t      if (test(values[index].beginRe, lexeme)) {\n\t        return values[index]\n\t      }\n\t    }\n\t  }\n\t\n\t  /* Exit the current context. */\n\t  function pop() {\n\t    /* istanbul ignore next - removed in hljs 9.3 */\n\t    currentChildren = stack.pop() || children\n\t  }\n\t}\n\t\n\tfunction expandMode(mode) {\n\t  var length\n\t  var index\n\t  var variants\n\t  var result\n\t\n\t  if (mode.variants && !mode[keyCachedVariants]) {\n\t    variants = mode.variants\n\t    length = variants.length\n\t    index = -1\n\t    result = []\n\t\n\t    while (++index < length) {\n\t      result[index] = inherit(mode, {variants: null}, variants[index])\n\t    }\n\t\n\t    mode[keyCachedVariants] = result\n\t  }\n\t\n\t  return (\n\t    mode[keyCachedVariants] || (mode.endsWithParent ? [inherit(mode)] : [mode])\n\t  )\n\t}\n\t\n\t/* Compile a language. */\n\tfunction compileLanguage(language) {\n\t  compileMode(language)\n\t\n\t  /* Compile a language mode, optionally with a parent. */\n\t  function compileMode(mode, parent) {\n\t    var compiledKeywords = {}\n\t    var terminators\n\t\n\t    if (mode.compiled) {\n\t      return\n\t    }\n\t\n\t    mode.compiled = true\n\t\n\t    mode.keywords = mode.keywords || mode.beginKeywords\n\t\n\t    if (mode.keywords) {\n\t      if (typeof mode.keywords === 'string') {\n\t        flatten('keyword', mode.keywords)\n\t      } else {\n\t        Object.keys(mode.keywords).forEach(function(className) {\n\t          flatten(className, mode.keywords[className])\n\t        })\n\t      }\n\t\n\t      mode.keywords = compiledKeywords\n\t    }\n\t\n\t    mode.lexemesRe = langRe(mode.lexemes || /\\w+/, true)\n\t\n\t    if (parent) {\n\t      if (mode.beginKeywords) {\n\t        mode.begin =\n\t          '\\\\b(' + mode.beginKeywords.split(space).join(pipe) + ')\\\\b'\n\t      }\n\t\n\t      if (!mode.begin) {\n\t        mode.begin = /\\B|\\b/\n\t      }\n\t\n\t      mode.beginRe = langRe(mode.begin)\n\t\n\t      if (!mode.end && !mode.endsWithParent) {\n\t        mode.end = /\\B|\\b/\n\t      }\n\t\n\t      if (mode.end) {\n\t        mode.endRe = langRe(mode.end)\n\t      }\n\t\n\t      mode.terminatorEnd = source(mode.end) || ''\n\t\n\t      if (mode.endsWithParent && parent.terminatorEnd) {\n\t        mode.terminatorEnd += (mode.end ? pipe : '') + parent.terminatorEnd\n\t      }\n\t    }\n\t\n\t    if (mode.illegal) {\n\t      mode.illegalRe = langRe(mode.illegal)\n\t    }\n\t\n\t    if (mode.relevance === undefined) {\n\t      mode.relevance = 1\n\t    }\n\t\n\t    if (!mode.contains) {\n\t      mode.contains = []\n\t    }\n\t\n\t    mode.contains = concat.apply(\n\t      [],\n\t      mode.contains.map(function(c) {\n\t        return expandMode(c === 'self' ? mode : c)\n\t      })\n\t    )\n\t\n\t    mode.contains.forEach(function(c) {\n\t      compileMode(c, mode)\n\t    })\n\t\n\t    if (mode.starts) {\n\t      compileMode(mode.starts, parent)\n\t    }\n\t\n\t    terminators = mode.contains\n\t      .map(map)\n\t      .concat([mode.terminatorEnd, mode.illegal])\n\t      .map(source)\n\t      .filter(Boolean)\n\t\n\t    mode.terminators = terminators.length\n\t      ? langRe(terminators.join(pipe), true)\n\t      : {exec: execNoop}\n\t\n\t    function map(c) {\n\t      return c.beginKeywords ? '\\\\.?(' + c.begin + ')\\\\.?' : c.begin\n\t    }\n\t\n\t    /* Flatten a classname. */\n\t    function flatten(className, value) {\n\t      var pairs\n\t      var pair\n\t      var index\n\t      var length\n\t\n\t      if (language[keyInsensitive]) {\n\t        value = value.toLowerCase()\n\t      }\n\t\n\t      pairs = value.split(space)\n\t      length = pairs.length\n\t      index = -1\n\t\n\t      while (++index < length) {\n\t        pair = pairs[index].split(pipe)\n\t\n\t        compiledKeywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1]\n\t      }\n\t    }\n\t  }\n\t\n\t  /* Create a regex for `value`. */\n\t  function langRe(value, global) {\n\t    return new RegExp(\n\t      source(value),\n\t      'm' + (language[keyInsensitive] ? 'i' : '') + (global ? 'g' : '')\n\t    )\n\t  }\n\t\n\t  /* Get the source of an expression or string. */\n\t  function source(re) {\n\t    return (re && re.source) || re\n\t  }\n\t}\n\t\n\t/* Normalize a syntax result. */\n\tfunction normalize(result) {\n\t  return {\n\t    relevance: result.relevance || 0,\n\t    language: result.language || null,\n\t    value: result.value || []\n\t  }\n\t}\n\t\n\t/* Check if `expression` matches `lexeme`. */\n\tfunction test(expression, lexeme) {\n\t  var match = expression && expression.exec(lexeme)\n\t  return match && match.index === 0\n\t}\n\t\n\t/* No-op exec. */\n\tfunction execNoop() {\n\t  return null\n\t}\n\t\n\t/* Get a language by `name`. */\n\tfunction getLanguage(name) {\n\t  name = name.toLowerCase()\n\t\n\t  return languages[name] || languages[aliases[name]]\n\t}\n\n\n/***/ }),\n\n/***/ 436:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _assign = __webpack_require__(78);\n\t\n\tvar _assign2 = _interopRequireDefault(_assign);\n\t\n\tvar _extends2 = __webpack_require__(57);\n\t\n\tvar _extends3 = _interopRequireDefault(_extends2);\n\t\n\texports.createStyleObject = createStyleObject;\n\texports.createClassNameString = createClassNameString;\n\texports.createChildren = createChildren;\n\texports.default = createElement;\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction createStyleObject(classNames) {\n\t  var elementStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t  var stylesheet = arguments[2];\n\t\n\t  return classNames.reduce(function (styleObject, className) {\n\t    return (0, _extends3.default)({}, styleObject, stylesheet[className]);\n\t  }, elementStyle);\n\t}\n\t\n\tfunction createClassNameString(classNames) {\n\t  return classNames.join(' ');\n\t}\n\t\n\tfunction createChildren(stylesheet, useInlineStyles) {\n\t  var childrenCount = 0;\n\t  return function (children) {\n\t    childrenCount += 1;\n\t    return children.map(function (child, i) {\n\t      return createElement({\n\t        node: child,\n\t        stylesheet: stylesheet,\n\t        useInlineStyles: useInlineStyles,\n\t        key: 'code-segment-' + childrenCount + '-' + i\n\t      });\n\t    });\n\t  };\n\t}\n\t\n\tfunction createElement(_ref) {\n\t  var node = _ref.node,\n\t      stylesheet = _ref.stylesheet,\n\t      _ref$style = _ref.style,\n\t      style = _ref$style === undefined ? {} : _ref$style,\n\t      useInlineStyles = _ref.useInlineStyles,\n\t      key = _ref.key;\n\t  var properties = node.properties,\n\t      type = node.type,\n\t      TagName = node.tagName,\n\t      value = node.value;\n\t\n\t  if (type === 'text') {\n\t    return value;\n\t  } else if (TagName) {\n\t    var childrenCreator = createChildren(stylesheet, useInlineStyles);\n\t    var props = useInlineStyles ? {\n\t      style: createStyleObject(properties.className, (0, _assign2.default)({}, properties.style, style), stylesheet)\n\t    } : { className: createClassNameString(properties.className) };\n\t    var children = childrenCreator(node.children);\n\t    return _react2.default.createElement(\n\t      TagName,\n\t      (0, _extends3.default)({ key: key }, props),\n\t      children\n\t    );\n\t  }\n\t}\n\n/***/ }),\n\n/***/ 437:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _assign = __webpack_require__(78);\n\t\n\tvar _assign2 = _interopRequireDefault(_assign);\n\t\n\tvar _objectWithoutProperties2 = __webpack_require__(58);\n\t\n\tvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\t\n\texports.default = function (lowlight, defaultStyle) {\n\t  return function SyntaxHighlighter(_ref5) {\n\t    var language = _ref5.language,\n\t        children = _ref5.children,\n\t        _ref5$style = _ref5.style,\n\t        style = _ref5$style === undefined ? defaultStyle : _ref5$style,\n\t        _ref5$customStyle = _ref5.customStyle,\n\t        customStyle = _ref5$customStyle === undefined ? {} : _ref5$customStyle,\n\t        _ref5$codeTagProps = _ref5.codeTagProps,\n\t        codeTagProps = _ref5$codeTagProps === undefined ? {} : _ref5$codeTagProps,\n\t        _ref5$useInlineStyles = _ref5.useInlineStyles,\n\t        useInlineStyles = _ref5$useInlineStyles === undefined ? true : _ref5$useInlineStyles,\n\t        _ref5$showLineNumbers = _ref5.showLineNumbers,\n\t        showLineNumbers = _ref5$showLineNumbers === undefined ? false : _ref5$showLineNumbers,\n\t        _ref5$startingLineNum = _ref5.startingLineNumber,\n\t        startingLineNumber = _ref5$startingLineNum === undefined ? 1 : _ref5$startingLineNum,\n\t        lineNumberContainerStyle = _ref5.lineNumberContainerStyle,\n\t        lineNumberStyle = _ref5.lineNumberStyle,\n\t        wrapLines = _ref5.wrapLines,\n\t        _ref5$lineStyle = _ref5.lineStyle,\n\t        lineStyle = _ref5$lineStyle === undefined ? {} : _ref5$lineStyle,\n\t        renderer = _ref5.renderer,\n\t        _ref5$PreTag = _ref5.PreTag,\n\t        PreTag = _ref5$PreTag === undefined ? 'pre' : _ref5$PreTag,\n\t        _ref5$CodeTag = _ref5.CodeTag,\n\t        CodeTag = _ref5$CodeTag === undefined ? 'code' : _ref5$CodeTag,\n\t        _ref5$code = _ref5.code,\n\t        code = _ref5$code === undefined ? Array.isArray(children) ? children[0] : children : _ref5$code,\n\t        rest = (0, _objectWithoutProperties3.default)(_ref5, ['language', 'children', 'style', 'customStyle', 'codeTagProps', 'useInlineStyles', 'showLineNumbers', 'startingLineNumber', 'lineNumberContainerStyle', 'lineNumberStyle', 'wrapLines', 'lineStyle', 'renderer', 'PreTag', 'CodeTag', 'code']);\n\t\n\t    /* \n\t     * some custom renderers rely on individual row elements so we need to turn wrapLines on \n\t     * if renderer is provided and wrapLines is undefined\n\t    */\n\t    wrapLines = renderer && wrapLines === undefined ? true : wrapLines;\n\t    renderer = renderer || defaultRenderer;\n\t    var codeTree = language && !!lowlight.getLanguage(language) ? lowlight.highlight(language, code) : lowlight.highlightAuto(code);\n\t    if (codeTree.language === null || language === 'text') {\n\t      codeTree.value = [{ type: 'text', value: code }];\n\t    }\n\t    var defaultPreStyle = style.hljs || { backgroundColor: '#fff' };\n\t    var preProps = useInlineStyles ? (0, _assign2.default)({}, rest, { style: (0, _assign2.default)({}, defaultPreStyle, customStyle) }) : (0, _assign2.default)({}, rest, { className: 'hljs' });\n\t\n\t    var tree = wrapLines ? wrapLinesInSpan(codeTree, lineStyle) : codeTree.value;\n\t    var lineNumbers = showLineNumbers ? _react2.default.createElement(LineNumbers, {\n\t      containerStyle: lineNumberContainerStyle,\n\t      numberStyle: lineNumberStyle,\n\t      startingLineNumber: startingLineNumber,\n\t      codeString: code\n\t    }) : null;\n\t    return _react2.default.createElement(\n\t      PreTag,\n\t      preProps,\n\t      lineNumbers,\n\t      _react2.default.createElement(\n\t        CodeTag,\n\t        codeTagProps,\n\t        renderer({ rows: tree, stylesheet: style, useInlineStyles: useInlineStyles })\n\t      )\n\t    );\n\t  };\n\t};\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _createElement = __webpack_require__(436);\n\t\n\tvar _createElement2 = _interopRequireDefault(_createElement);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar newLineRegex = /\\n/g;\n\tfunction getNewLines(str) {\n\t  return str.match(newLineRegex);\n\t}\n\t\n\tfunction getLineNumbers(_ref) {\n\t  var lines = _ref.lines,\n\t      startingLineNumber = _ref.startingLineNumber,\n\t      style = _ref.style;\n\t\n\t  return lines.map(function (_, i) {\n\t    var number = i + startingLineNumber;\n\t    return _react2.default.createElement(\n\t      'span',\n\t      {\n\t        key: 'line-' + i,\n\t        className: 'react-syntax-highlighter-line-number',\n\t        style: typeof style === 'function' ? style(number) : style\n\t      },\n\t      number + '\\n'\n\t    );\n\t  });\n\t}\n\t\n\tfunction LineNumbers(_ref2) {\n\t  var codeString = _ref2.codeString,\n\t      _ref2$containerStyle = _ref2.containerStyle,\n\t      containerStyle = _ref2$containerStyle === undefined ? { float: 'left', paddingRight: '10px' } : _ref2$containerStyle,\n\t      _ref2$numberStyle = _ref2.numberStyle,\n\t      numberStyle = _ref2$numberStyle === undefined ? {} : _ref2$numberStyle,\n\t      startingLineNumber = _ref2.startingLineNumber;\n\t\n\t  return _react2.default.createElement(\n\t    'code',\n\t    { style: containerStyle },\n\t    getLineNumbers({\n\t      lines: codeString.replace(/\\n$/, '').split('\\n'),\n\t      style: numberStyle,\n\t      startingLineNumber: startingLineNumber\n\t    })\n\t  );\n\t}\n\t\n\tfunction createLineElement(_ref3) {\n\t  var children = _ref3.children,\n\t      lineNumber = _ref3.lineNumber,\n\t      lineStyle = _ref3.lineStyle,\n\t      _ref3$className = _ref3.className,\n\t      className = _ref3$className === undefined ? [] : _ref3$className;\n\t\n\t  return {\n\t    type: 'element',\n\t    tagName: 'span',\n\t    properties: {\n\t      className: className,\n\t      style: typeof lineStyle === 'function' ? lineStyle(lineNumber) : lineStyle\n\t    },\n\t    children: children\n\t  };\n\t}\n\t\n\tfunction flattenCodeTree(tree) {\n\t  var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\t  var newTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\t\n\t  for (var i = 0; i < tree.length; i++) {\n\t    var node = tree[i];\n\t    if (node.type === 'text') {\n\t      newTree.push(createLineElement({\n\t        children: [node],\n\t        className: className\n\t      }));\n\t    } else if (node.children) {\n\t      var classNames = className.concat(node.properties.className);\n\t      newTree = newTree.concat(flattenCodeTree(node.children, classNames));\n\t    }\n\t  }\n\t  return newTree;\n\t}\n\t\n\tfunction wrapLinesInSpan(codeTree, lineStyle) {\n\t  var tree = flattenCodeTree(codeTree.value);\n\t  var newTree = [];\n\t  var lastLineBreakIndex = -1;\n\t  var index = 0;\n\t\n\t  var _loop = function _loop() {\n\t    var node = tree[index];\n\t    var value = node.children[0].value;\n\t    var newLines = getNewLines(value);\n\t    if (newLines) {\n\t      (function () {\n\t        var splitValue = value.split('\\n');\n\t        splitValue.forEach(function (text, i) {\n\t          var lineNumber = newTree.length + 1;\n\t          var newChild = { type: 'text', value: text + '\\n' };\n\t          if (i === 0) {\n\t            var _children = tree.slice(lastLineBreakIndex + 1, index).concat(createLineElement({ children: [newChild], className: node.properties.className }));\n\t            newTree.push(createLineElement({ children: _children, lineNumber: lineNumber, lineStyle: lineStyle }));\n\t          } else if (i === splitValue.length - 1) {\n\t            var stringChild = tree[index + 1] && tree[index + 1].children && tree[index + 1].children[0];\n\t            if (stringChild) {\n\t              var lastLineInPreviousSpan = { type: 'text', value: '' + text };\n\t              var newElem = createLineElement({ children: [lastLineInPreviousSpan], className: node.properties.className });\n\t              tree.splice(index + 1, 0, newElem);\n\t            } else {\n\t              newTree.push(createLineElement({ children: [newChild], lineNumber: lineNumber, lineStyle: lineStyle }));\n\t            }\n\t          } else {\n\t            newTree.push(createLineElement({ children: [newChild], lineNumber: lineNumber, lineStyle: lineStyle }));\n\t          }\n\t        });\n\t        lastLineBreakIndex = index;\n\t      })();\n\t    }\n\t    index++;\n\t  };\n\t\n\t  while (index < tree.length) {\n\t    _loop();\n\t  }\n\t  if (lastLineBreakIndex !== tree.length - 1) {\n\t    var children = tree.slice(lastLineBreakIndex + 1, tree.length);\n\t    if (children && children.length) {\n\t      newTree.push(createLineElement({ children: children, lineNumber: newTree.length + 1, lineStyle: lineStyle }));\n\t    }\n\t  }\n\t  return newTree;\n\t}\n\t\n\tfunction defaultRenderer(_ref4) {\n\t  var rows = _ref4.rows,\n\t      stylesheet = _ref4.stylesheet,\n\t      useInlineStyles = _ref4.useInlineStyles;\n\t\n\t  return rows.map(function (node, i) {\n\t    return (0, _createElement2.default)({\n\t      node: node,\n\t      stylesheet: stylesheet,\n\t      useInlineStyles: useInlineStyles,\n\t      key: 'code-segement' + i\n\t    });\n\t  });\n\t}\n\n/***/ }),\n\n/***/ 438:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _javascript = __webpack_require__(330);\n\t\n\tvar _javascript2 = _interopRequireDefault(_javascript);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = _javascript2.default;\n\n/***/ }),\n\n/***/ 439:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.registerLanguage = undefined;\n\t\n\tvar _highlight = __webpack_require__(437);\n\t\n\tvar _highlight2 = _interopRequireDefault(_highlight);\n\t\n\tvar _core = __webpack_require__(345);\n\t\n\tvar _core2 = _interopRequireDefault(_core);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar registerLanguage = exports.registerLanguage = _core2.default.registerLanguage;\n\texports.default = (0, _highlight2.default)(_core2.default, {});\n\n/***/ }),\n\n/***/ 440:\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.default = {\n\t    \"hljs\": {\n\t        \"display\": \"block\",\n\t        \"overflowX\": \"auto\",\n\t        \"padding\": \"0.5em\",\n\t        \"color\": \"#000\",\n\t        \"background\": \"#f8f8ff\"\n\t    },\n\t    \"hljs-comment\": {\n\t        \"color\": \"#408080\",\n\t        \"fontStyle\": \"italic\"\n\t    },\n\t    \"hljs-quote\": {\n\t        \"color\": \"#408080\",\n\t        \"fontStyle\": \"italic\"\n\t    },\n\t    \"hljs-keyword\": {\n\t        \"color\": \"#954121\"\n\t    },\n\t    \"hljs-selector-tag\": {\n\t        \"color\": \"#954121\"\n\t    },\n\t    \"hljs-literal\": {\n\t        \"color\": \"#954121\"\n\t    },\n\t    \"hljs-subst\": {\n\t        \"color\": \"#954121\"\n\t    },\n\t    \"hljs-number\": {\n\t        \"color\": \"#40a070\"\n\t    },\n\t    \"hljs-string\": {\n\t        \"color\": \"#219161\"\n\t    },\n\t    \"hljs-doctag\": {\n\t        \"color\": \"#219161\"\n\t    },\n\t    \"hljs-selector-id\": {\n\t        \"color\": \"#19469d\"\n\t    },\n\t    \"hljs-selector-class\": {\n\t        \"color\": \"#19469d\"\n\t    },\n\t    \"hljs-section\": {\n\t        \"color\": \"#19469d\"\n\t    },\n\t    \"hljs-type\": {\n\t        \"color\": \"#19469d\"\n\t    },\n\t    \"hljs-params\": {\n\t        \"color\": \"#00f\"\n\t    },\n\t    \"hljs-title\": {\n\t        \"color\": \"#458\",\n\t        \"fontWeight\": \"bold\"\n\t    },\n\t    \"hljs-tag\": {\n\t        \"color\": \"#000080\",\n\t        \"fontWeight\": \"normal\"\n\t    },\n\t    \"hljs-name\": {\n\t        \"color\": \"#000080\",\n\t        \"fontWeight\": \"normal\"\n\t    },\n\t    \"hljs-attribute\": {\n\t        \"color\": \"#000080\",\n\t        \"fontWeight\": \"normal\"\n\t    },\n\t    \"hljs-variable\": {\n\t        \"color\": \"#008080\"\n\t    },\n\t    \"hljs-template-variable\": {\n\t        \"color\": \"#008080\"\n\t    },\n\t    \"hljs-regexp\": {\n\t        \"color\": \"#b68\"\n\t    },\n\t    \"hljs-link\": {\n\t        \"color\": \"#b68\"\n\t    },\n\t    \"hljs-symbol\": {\n\t        \"color\": \"#990073\"\n\t    },\n\t    \"hljs-bullet\": {\n\t        \"color\": \"#990073\"\n\t    },\n\t    \"hljs-built_in\": {\n\t        \"color\": \"#0086b3\"\n\t    },\n\t    \"hljs-builtin-name\": {\n\t        \"color\": \"#0086b3\"\n\t    },\n\t    \"hljs-meta\": {\n\t        \"color\": \"#999\",\n\t        \"fontWeight\": \"bold\"\n\t    },\n\t    \"hljs-deletion\": {\n\t        \"background\": \"#fdd\"\n\t    },\n\t    \"hljs-addition\": {\n\t        \"background\": \"#dfd\"\n\t    },\n\t    \"hljs-emphasis\": {\n\t        \"fontStyle\": \"italic\"\n\t    },\n\t    \"hljs-strong\": {\n\t        \"fontWeight\": \"bold\"\n\t    }\n\t};\n\n/***/ }),\n\n/***/ 207:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\texports.__esModule = true;\n\texports.pageQuery = undefined;\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _gatsbyLink = __webpack_require__(49);\n\t\n\tvar _gatsbyLink2 = _interopRequireDefault(_gatsbyLink);\n\t\n\tvar _propTypes = __webpack_require__(6);\n\t\n\tvar PropTypes = _interopRequireWildcard(_propTypes);\n\t\n\tvar _light = __webpack_require__(439);\n\t\n\tvar _light2 = _interopRequireDefault(_light);\n\t\n\tvar _javascript = __webpack_require__(438);\n\t\n\tvar _javascript2 = _interopRequireDefault(_javascript);\n\t\n\tvar _docco = __webpack_require__(440);\n\t\n\tvar _docco2 = _interopRequireDefault(_docco);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\t(0, _light.registerLanguage)('javascript', _javascript2.default);\n\t\n\tvar propTypes = {\n\t  data: PropTypes.object.isRequired\n\t};\n\t\n\tvar BlogPostTemplate = function (_React$Component) {\n\t  _inherits(BlogPostTemplate, _React$Component);\n\t\n\t  function BlogPostTemplate() {\n\t    _classCallCheck(this, BlogPostTemplate);\n\t\n\t    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n\t  }\n\t\n\t  BlogPostTemplate.prototype.render = function render() {\n\t    var blogPost = this.props.data.contentfulBlogPost;\n\t    var postTitle = blogPost.postTitle,\n\t        datePosted = blogPost.datePosted,\n\t        postContent = blogPost.postContent,\n\t        author = blogPost.author,\n\t        postSlug = blogPost.postSlug,\n\t        contentPreview = blogPost.contentPreview;\n\t\n\t    var codeTest = '(num) => num + 1;';\n\t    return _react2.default.createElement(\n\t      \"div\",\n\t      null,\n\t      _react2.default.createElement(\n\t        \"div\",\n\t        {\n\t          style: {\n\t            display: \"flex\",\n\t            alignItems: \"center\"\n\t          }\n\t        },\n\t        _react2.default.createElement(\n\t          \"h4\",\n\t          null,\n\t          postTitle\n\t        )\n\t      ),\n\t      _react2.default.createElement(\n\t        \"div\",\n\t        null,\n\t        _react2.default.createElement(\n\t          \"p\",\n\t          null,\n\t          author.name,\n\t          _react2.default.createElement(\"img\", { src: author.avatar.responsiveResolution.src })\n\t        )\n\t      ),\n\t      _react2.default.createElement(\n\t        \"div\",\n\t        null,\n\t        _react2.default.createElement(\n\t          \"span\",\n\t          null,\n\t          \"Date Posted: \",\n\t          datePosted\n\t        ),\n\t        _react2.default.createElement(\"div\", {\n\t          dangerouslySetInnerHTML: {\n\t            __html: postContent.childMarkdownRemark.html\n\t          }\n\t        })\n\t      )\n\t    );\n\t  };\n\t\n\t  return BlogPostTemplate;\n\t}(_react2.default.Component);\n\t\n\tBlogPostTemplate.propTypes = propTypes;\n\t\n\texports.default = BlogPostTemplate;\n\tvar pageQuery = exports.pageQuery = \"** extracted graphql fragment **\";\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-templates-blog-post-js-a80b4fdb05c27ca8de1d.js","'use strict'\n\nvar formatter = require('format')\n\nvar fault = create(Error)\n\nmodule.exports = fault\n\nfault.eval = create(EvalError)\nfault.range = create(RangeError)\nfault.reference = create(ReferenceError)\nfault.syntax = create(SyntaxError)\nfault.type = create(TypeError)\nfault.uri = create(URIError)\n\nfault.create = create\n\n/* Create a new `EConstructor`, with the formatted\n * `format` as a first argument. */\nfunction create(EConstructor) {\n  FormattedError.displayName = EConstructor.displayName || EConstructor.name\n\n  return FormattedError\n\n  function FormattedError(format) {\n    if (format) {\n      format = formatter.apply(null, arguments)\n    }\n\n    return new EConstructor(format)\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/fault/index.js\n// module id = 296\n// module chunks = 107818501498521","//\n// format - printf-like string formatting for JavaScript\n// github.com/samsonjs/format\n// @_sjs\n//\n// Copyright 2010 - 2013 Sami Samhuri <sami@samhuri.net>\n//\n// MIT License\n// http://sjs.mit-license.org\n//\n\n;(function() {\n\n  //// Export the API\n  var namespace;\n\n  // CommonJS / Node module\n  if (typeof module !== 'undefined') {\n    namespace = module.exports = format;\n  }\n\n  // Browsers and other environments\n  else {\n    // Get the global object. Works in ES3, ES5, and ES5 strict mode.\n    namespace = (function(){ return this || (1,eval)('this') }());\n  }\n\n  namespace.format = format;\n  namespace.vsprintf = vsprintf;\n\n  if (typeof console !== 'undefined' && typeof console.log === 'function') {\n    namespace.printf = printf;\n  }\n\n  function printf(/* ... */) {\n    console.log(format.apply(null, arguments));\n  }\n\n  function vsprintf(fmt, replacements) {\n    return format.apply(null, [fmt].concat(replacements));\n  }\n\n  function format(fmt) {\n    var argIndex = 1 // skip initial format argument\n      , args = [].slice.call(arguments)\n      , i = 0\n      , n = fmt.length\n      , result = ''\n      , c\n      , escaped = false\n      , arg\n      , tmp\n      , leadingZero = false\n      , precision\n      , nextArg = function() { return args[argIndex++]; }\n      , slurpNumber = function() {\n          var digits = '';\n          while (/\\d/.test(fmt[i])) {\n            digits += fmt[i++];\n            c = fmt[i];\n          }\n          return digits.length > 0 ? parseInt(digits) : null;\n        }\n      ;\n    for (; i < n; ++i) {\n      c = fmt[i];\n      if (escaped) {\n        escaped = false;\n        if (c == '.') {\n          leadingZero = false;\n          c = fmt[++i];\n        }\n        else if (c == '0' && fmt[i + 1] == '.') {\n          leadingZero = true;\n          i += 2;\n          c = fmt[i];\n        }\n        else {\n          leadingZero = true;\n        }\n        precision = slurpNumber();\n        switch (c) {\n        case 'b': // number in binary\n          result += parseInt(nextArg(), 10).toString(2);\n          break;\n        case 'c': // character\n          arg = nextArg();\n          if (typeof arg === 'string' || arg instanceof String)\n            result += arg;\n          else\n            result += String.fromCharCode(parseInt(arg, 10));\n          break;\n        case 'd': // number in decimal\n          result += parseInt(nextArg(), 10);\n          break;\n        case 'f': // floating point number\n          tmp = String(parseFloat(nextArg()).toFixed(precision || 6));\n          result += leadingZero ? tmp : tmp.replace(/^0/, '');\n          break;\n        case 'j': // JSON\n          result += JSON.stringify(nextArg());\n          break;\n        case 'o': // number in octal\n          result += '0' + parseInt(nextArg(), 10).toString(8);\n          break;\n        case 's': // string\n          result += nextArg();\n          break;\n        case 'x': // lowercase hexadecimal\n          result += '0x' + parseInt(nextArg(), 10).toString(16);\n          break;\n        case 'X': // uppercase hexadecimal\n          result += '0x' + parseInt(nextArg(), 10).toString(16).toUpperCase();\n          break;\n        default:\n          result += c;\n          break;\n        }\n      } else if (c === '%') {\n        escaped = true;\n      } else {\n        result += c;\n      }\n    }\n    return result;\n  }\n\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/format/format.js\n// module id = 309\n// module chunks = 107818501498521","/*\nSyntax highlighting with language autodetection.\nhttps://highlightjs.org/\n*/\n\n(function(factory) {\n\n  // Find the global object for export to both the browser and web workers.\n  var globalObject = typeof window === 'object' && window ||\n                     typeof self === 'object' && self;\n\n  // Setup highlight.js for different environments. First is Node.js or\n  // CommonJS.\n  if(typeof exports !== 'undefined') {\n    factory(exports);\n  } else if(globalObject) {\n    // Export hljs globally even when using AMD for cases when this script\n    // is loaded with others that may still expect a global hljs.\n    globalObject.hljs = factory({});\n\n    // Finally register the global hljs with AMD.\n    if(typeof define === 'function' && define.amd) {\n      define([], function() {\n        return globalObject.hljs;\n      });\n    }\n  }\n\n}(function(hljs) {\n  // Convenience variables for build-in objects\n  var ArrayProto = [],\n      objectKeys = Object.keys;\n\n  // Global internal variables used within the highlight.js library.\n  var languages = {},\n      aliases   = {};\n\n  // Regular expressions used throughout the highlight.js library.\n  var noHighlightRe    = /^(no-?highlight|plain|text)$/i,\n      languagePrefixRe = /\\blang(?:uage)?-([\\w-]+)\\b/i,\n      fixMarkupRe      = /((^(<[^>]+>|\\t|)+|(?:\\n)))/gm;\n\n  var spanEndTag = '</span>';\n\n  // Global options used when within external APIs. This is modified when\n  // calling the `hljs.configure` function.\n  var options = {\n    classPrefix: 'hljs-',\n    tabReplace: null,\n    useBR: false,\n    languages: undefined\n  };\n\n\n  /* Utility functions */\n\n  function escape(value) {\n    return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  }\n\n  function tag(node) {\n    return node.nodeName.toLowerCase();\n  }\n\n  function testRe(re, lexeme) {\n    var match = re && re.exec(lexeme);\n    return match && match.index === 0;\n  }\n\n  function isNotHighlighted(language) {\n    return noHighlightRe.test(language);\n  }\n\n  function blockLanguage(block) {\n    var i, match, length, _class;\n    var classes = block.className + ' ';\n\n    classes += block.parentNode ? block.parentNode.className : '';\n\n    // language-* takes precedence over non-prefixed class names.\n    match = languagePrefixRe.exec(classes);\n    if (match) {\n      return getLanguage(match[1]) ? match[1] : 'no-highlight';\n    }\n\n    classes = classes.split(/\\s+/);\n\n    for (i = 0, length = classes.length; i < length; i++) {\n      _class = classes[i]\n\n      if (isNotHighlighted(_class) || getLanguage(_class)) {\n        return _class;\n      }\n    }\n  }\n\n  function inherit(parent) {  // inherit(parent, override_obj, override_obj, ...)\n    var key;\n    var result = {};\n    var objects = Array.prototype.slice.call(arguments, 1);\n\n    for (key in parent)\n      result[key] = parent[key];\n    objects.forEach(function(obj) {\n      for (key in obj)\n        result[key] = obj[key];\n    });\n    return result;\n  }\n\n  /* Stream merging */\n\n  function nodeStream(node) {\n    var result = [];\n    (function _nodeStream(node, offset) {\n      for (var child = node.firstChild; child; child = child.nextSibling) {\n        if (child.nodeType === 3)\n          offset += child.nodeValue.length;\n        else if (child.nodeType === 1) {\n          result.push({\n            event: 'start',\n            offset: offset,\n            node: child\n          });\n          offset = _nodeStream(child, offset);\n          // Prevent void elements from having an end tag that would actually\n          // double them in the output. There are more void elements in HTML\n          // but we list only those realistically expected in code display.\n          if (!tag(child).match(/br|hr|img|input/)) {\n            result.push({\n              event: 'stop',\n              offset: offset,\n              node: child\n            });\n          }\n        }\n      }\n      return offset;\n    })(node, 0);\n    return result;\n  }\n\n  function mergeStreams(original, highlighted, value) {\n    var processed = 0;\n    var result = '';\n    var nodeStack = [];\n\n    function selectStream() {\n      if (!original.length || !highlighted.length) {\n        return original.length ? original : highlighted;\n      }\n      if (original[0].offset !== highlighted[0].offset) {\n        return (original[0].offset < highlighted[0].offset) ? original : highlighted;\n      }\n\n      /*\n      To avoid starting the stream just before it should stop the order is\n      ensured that original always starts first and closes last:\n\n      if (event1 == 'start' && event2 == 'start')\n        return original;\n      if (event1 == 'start' && event2 == 'stop')\n        return highlighted;\n      if (event1 == 'stop' && event2 == 'start')\n        return original;\n      if (event1 == 'stop' && event2 == 'stop')\n        return highlighted;\n\n      ... which is collapsed to:\n      */\n      return highlighted[0].event === 'start' ? original : highlighted;\n    }\n\n    function open(node) {\n      function attr_str(a) {return ' ' + a.nodeName + '=\"' + escape(a.value).replace('\"', '&quot;') + '\"';}\n      result += '<' + tag(node) + ArrayProto.map.call(node.attributes, attr_str).join('') + '>';\n    }\n\n    function close(node) {\n      result += '</' + tag(node) + '>';\n    }\n\n    function render(event) {\n      (event.event === 'start' ? open : close)(event.node);\n    }\n\n    while (original.length || highlighted.length) {\n      var stream = selectStream();\n      result += escape(value.substring(processed, stream[0].offset));\n      processed = stream[0].offset;\n      if (stream === original) {\n        /*\n        On any opening or closing tag of the original markup we first close\n        the entire highlighted node stack, then render the original tag along\n        with all the following original tags at the same offset and then\n        reopen all the tags on the highlighted stack.\n        */\n        nodeStack.reverse().forEach(close);\n        do {\n          render(stream.splice(0, 1)[0]);\n          stream = selectStream();\n        } while (stream === original && stream.length && stream[0].offset === processed);\n        nodeStack.reverse().forEach(open);\n      } else {\n        if (stream[0].event === 'start') {\n          nodeStack.push(stream[0].node);\n        } else {\n          nodeStack.pop();\n        }\n        render(stream.splice(0, 1)[0]);\n      }\n    }\n    return result + escape(value.substr(processed));\n  }\n\n  /* Initialization */\n\n  function expand_mode(mode) {\n    if (mode.variants && !mode.cached_variants) {\n      mode.cached_variants = mode.variants.map(function(variant) {\n        return inherit(mode, {variants: null}, variant);\n      });\n    }\n    return mode.cached_variants || (mode.endsWithParent && [inherit(mode)]) || [mode];\n  }\n\n  function compileLanguage(language) {\n\n    function reStr(re) {\n        return (re && re.source) || re;\n    }\n\n    function langRe(value, global) {\n      return new RegExp(\n        reStr(value),\n        'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : '')\n      );\n    }\n\n    function compileMode(mode, parent) {\n      if (mode.compiled)\n        return;\n      mode.compiled = true;\n\n      mode.keywords = mode.keywords || mode.beginKeywords;\n      if (mode.keywords) {\n        var compiled_keywords = {};\n\n        var flatten = function(className, str) {\n          if (language.case_insensitive) {\n            str = str.toLowerCase();\n          }\n          str.split(' ').forEach(function(kw) {\n            var pair = kw.split('|');\n            compiled_keywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1];\n          });\n        };\n\n        if (typeof mode.keywords === 'string') { // string\n          flatten('keyword', mode.keywords);\n        } else {\n          objectKeys(mode.keywords).forEach(function (className) {\n            flatten(className, mode.keywords[className]);\n          });\n        }\n        mode.keywords = compiled_keywords;\n      }\n      mode.lexemesRe = langRe(mode.lexemes || /\\w+/, true);\n\n      if (parent) {\n        if (mode.beginKeywords) {\n          mode.begin = '\\\\b(' + mode.beginKeywords.split(' ').join('|') + ')\\\\b';\n        }\n        if (!mode.begin)\n          mode.begin = /\\B|\\b/;\n        mode.beginRe = langRe(mode.begin);\n        if (!mode.end && !mode.endsWithParent)\n          mode.end = /\\B|\\b/;\n        if (mode.end)\n          mode.endRe = langRe(mode.end);\n        mode.terminator_end = reStr(mode.end) || '';\n        if (mode.endsWithParent && parent.terminator_end)\n          mode.terminator_end += (mode.end ? '|' : '') + parent.terminator_end;\n      }\n      if (mode.illegal)\n        mode.illegalRe = langRe(mode.illegal);\n      if (mode.relevance == null)\n        mode.relevance = 1;\n      if (!mode.contains) {\n        mode.contains = [];\n      }\n      mode.contains = Array.prototype.concat.apply([], mode.contains.map(function(c) {\n        return expand_mode(c === 'self' ? mode : c)\n      }));\n      mode.contains.forEach(function(c) {compileMode(c, mode);});\n\n      if (mode.starts) {\n        compileMode(mode.starts, parent);\n      }\n\n      var terminators =\n        mode.contains.map(function(c) {\n          return c.beginKeywords ? '\\\\.?(' + c.begin + ')\\\\.?' : c.begin;\n        })\n        .concat([mode.terminator_end, mode.illegal])\n        .map(reStr)\n        .filter(Boolean);\n      mode.terminators = terminators.length ? langRe(terminators.join('|'), true) : {exec: function(/*s*/) {return null;}};\n    }\n\n    compileMode(language);\n  }\n\n  /*\n  Core highlighting function. Accepts a language name, or an alias, and a\n  string with the code to highlight. Returns an object with the following\n  properties:\n\n  - relevance (int)\n  - value (an HTML string with highlighting markup)\n\n  */\n  function highlight(name, value, ignore_illegals, continuation) {\n\n    function subMode(lexeme, mode) {\n      var i, length;\n\n      for (i = 0, length = mode.contains.length; i < length; i++) {\n        if (testRe(mode.contains[i].beginRe, lexeme)) {\n          return mode.contains[i];\n        }\n      }\n    }\n\n    function endOfMode(mode, lexeme) {\n      if (testRe(mode.endRe, lexeme)) {\n        while (mode.endsParent && mode.parent) {\n          mode = mode.parent;\n        }\n        return mode;\n      }\n      if (mode.endsWithParent) {\n        return endOfMode(mode.parent, lexeme);\n      }\n    }\n\n    function isIllegal(lexeme, mode) {\n      return !ignore_illegals && testRe(mode.illegalRe, lexeme);\n    }\n\n    function keywordMatch(mode, match) {\n      var match_str = language.case_insensitive ? match[0].toLowerCase() : match[0];\n      return mode.keywords.hasOwnProperty(match_str) && mode.keywords[match_str];\n    }\n\n    function buildSpan(classname, insideSpan, leaveOpen, noPrefix) {\n      var classPrefix = noPrefix ? '' : options.classPrefix,\n          openSpan    = '<span class=\"' + classPrefix,\n          closeSpan   = leaveOpen ? '' : spanEndTag\n\n      openSpan += classname + '\">';\n\n      return openSpan + insideSpan + closeSpan;\n    }\n\n    function processKeywords() {\n      var keyword_match, last_index, match, result;\n\n      if (!top.keywords)\n        return escape(mode_buffer);\n\n      result = '';\n      last_index = 0;\n      top.lexemesRe.lastIndex = 0;\n      match = top.lexemesRe.exec(mode_buffer);\n\n      while (match) {\n        result += escape(mode_buffer.substring(last_index, match.index));\n        keyword_match = keywordMatch(top, match);\n        if (keyword_match) {\n          relevance += keyword_match[1];\n          result += buildSpan(keyword_match[0], escape(match[0]));\n        } else {\n          result += escape(match[0]);\n        }\n        last_index = top.lexemesRe.lastIndex;\n        match = top.lexemesRe.exec(mode_buffer);\n      }\n      return result + escape(mode_buffer.substr(last_index));\n    }\n\n    function processSubLanguage() {\n      var explicit = typeof top.subLanguage === 'string';\n      if (explicit && !languages[top.subLanguage]) {\n        return escape(mode_buffer);\n      }\n\n      var result = explicit ?\n                   highlight(top.subLanguage, mode_buffer, true, continuations[top.subLanguage]) :\n                   highlightAuto(mode_buffer, top.subLanguage.length ? top.subLanguage : undefined);\n\n      // Counting embedded language score towards the host language may be disabled\n      // with zeroing the containing mode relevance. Usecase in point is Markdown that\n      // allows XML everywhere and makes every XML snippet to have a much larger Markdown\n      // score.\n      if (top.relevance > 0) {\n        relevance += result.relevance;\n      }\n      if (explicit) {\n        continuations[top.subLanguage] = result.top;\n      }\n      return buildSpan(result.language, result.value, false, true);\n    }\n\n    function processBuffer() {\n      result += (top.subLanguage != null ? processSubLanguage() : processKeywords());\n      mode_buffer = '';\n    }\n\n    function startNewMode(mode) {\n      result += mode.className? buildSpan(mode.className, '', true): '';\n      top = Object.create(mode, {parent: {value: top}});\n    }\n\n    function processLexeme(buffer, lexeme) {\n\n      mode_buffer += buffer;\n\n      if (lexeme == null) {\n        processBuffer();\n        return 0;\n      }\n\n      var new_mode = subMode(lexeme, top);\n      if (new_mode) {\n        if (new_mode.skip) {\n          mode_buffer += lexeme;\n        } else {\n          if (new_mode.excludeBegin) {\n            mode_buffer += lexeme;\n          }\n          processBuffer();\n          if (!new_mode.returnBegin && !new_mode.excludeBegin) {\n            mode_buffer = lexeme;\n          }\n        }\n        startNewMode(new_mode, lexeme);\n        return new_mode.returnBegin ? 0 : lexeme.length;\n      }\n\n      var end_mode = endOfMode(top, lexeme);\n      if (end_mode) {\n        var origin = top;\n        if (origin.skip) {\n          mode_buffer += lexeme;\n        } else {\n          if (!(origin.returnEnd || origin.excludeEnd)) {\n            mode_buffer += lexeme;\n          }\n          processBuffer();\n          if (origin.excludeEnd) {\n            mode_buffer = lexeme;\n          }\n        }\n        do {\n          if (top.className) {\n            result += spanEndTag;\n          }\n          if (!top.skip) {\n            relevance += top.relevance;\n          }\n          top = top.parent;\n        } while (top !== end_mode.parent);\n        if (end_mode.starts) {\n          startNewMode(end_mode.starts, '');\n        }\n        return origin.returnEnd ? 0 : lexeme.length;\n      }\n\n      if (isIllegal(lexeme, top))\n        throw new Error('Illegal lexeme \"' + lexeme + '\" for mode \"' + (top.className || '<unnamed>') + '\"');\n\n      /*\n      Parser should not reach this point as all types of lexemes should be caught\n      earlier, but if it does due to some bug make sure it advances at least one\n      character forward to prevent infinite looping.\n      */\n      mode_buffer += lexeme;\n      return lexeme.length || 1;\n    }\n\n    var language = getLanguage(name);\n    if (!language) {\n      throw new Error('Unknown language: \"' + name + '\"');\n    }\n\n    compileLanguage(language);\n    var top = continuation || language;\n    var continuations = {}; // keep continuations for sub-languages\n    var result = '', current;\n    for(current = top; current !== language; current = current.parent) {\n      if (current.className) {\n        result = buildSpan(current.className, '', true) + result;\n      }\n    }\n    var mode_buffer = '';\n    var relevance = 0;\n    try {\n      var match, count, index = 0;\n      while (true) {\n        top.terminators.lastIndex = index;\n        match = top.terminators.exec(value);\n        if (!match)\n          break;\n        count = processLexeme(value.substring(index, match.index), match[0]);\n        index = match.index + count;\n      }\n      processLexeme(value.substr(index));\n      for(current = top; current.parent; current = current.parent) { // close dangling modes\n        if (current.className) {\n          result += spanEndTag;\n        }\n      }\n      return {\n        relevance: relevance,\n        value: result,\n        language: name,\n        top: top\n      };\n    } catch (e) {\n      if (e.message && e.message.indexOf('Illegal') !== -1) {\n        return {\n          relevance: 0,\n          value: escape(value)\n        };\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  /*\n  Highlighting with language detection. Accepts a string with the code to\n  highlight. Returns an object with the following properties:\n\n  - language (detected language)\n  - relevance (int)\n  - value (an HTML string with highlighting markup)\n  - second_best (object with the same structure for second-best heuristically\n    detected language, may be absent)\n\n  */\n  function highlightAuto(text, languageSubset) {\n    languageSubset = languageSubset || options.languages || objectKeys(languages);\n    var result = {\n      relevance: 0,\n      value: escape(text)\n    };\n    var second_best = result;\n    languageSubset.filter(getLanguage).forEach(function(name) {\n      var current = highlight(name, text, false);\n      current.language = name;\n      if (current.relevance > second_best.relevance) {\n        second_best = current;\n      }\n      if (current.relevance > result.relevance) {\n        second_best = result;\n        result = current;\n      }\n    });\n    if (second_best.language) {\n      result.second_best = second_best;\n    }\n    return result;\n  }\n\n  /*\n  Post-processing of the highlighted markup:\n\n  - replace TABs with something more useful\n  - replace real line-breaks with '<br>' for non-pre containers\n\n  */\n  function fixMarkup(value) {\n    return !(options.tabReplace || options.useBR)\n      ? value\n      : value.replace(fixMarkupRe, function(match, p1) {\n          if (options.useBR && match === '\\n') {\n            return '<br>';\n          } else if (options.tabReplace) {\n            return p1.replace(/\\t/g, options.tabReplace);\n          }\n          return '';\n      });\n  }\n\n  function buildClassName(prevClassName, currentLang, resultLang) {\n    var language = currentLang ? aliases[currentLang] : resultLang,\n        result   = [prevClassName.trim()];\n\n    if (!prevClassName.match(/\\bhljs\\b/)) {\n      result.push('hljs');\n    }\n\n    if (prevClassName.indexOf(language) === -1) {\n      result.push(language);\n    }\n\n    return result.join(' ').trim();\n  }\n\n  /*\n  Applies highlighting to a DOM node containing code. Accepts a DOM node and\n  two optional parameters for fixMarkup.\n  */\n  function highlightBlock(block) {\n    var node, originalStream, result, resultNode, text;\n    var language = blockLanguage(block);\n\n    if (isNotHighlighted(language))\n        return;\n\n    if (options.useBR) {\n      node = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n      node.innerHTML = block.innerHTML.replace(/\\n/g, '').replace(/<br[ \\/]*>/g, '\\n');\n    } else {\n      node = block;\n    }\n    text = node.textContent;\n    result = language ? highlight(language, text, true) : highlightAuto(text);\n\n    originalStream = nodeStream(node);\n    if (originalStream.length) {\n      resultNode = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n      resultNode.innerHTML = result.value;\n      result.value = mergeStreams(originalStream, nodeStream(resultNode), text);\n    }\n    result.value = fixMarkup(result.value);\n\n    block.innerHTML = result.value;\n    block.className = buildClassName(block.className, language, result.language);\n    block.result = {\n      language: result.language,\n      re: result.relevance\n    };\n    if (result.second_best) {\n      block.second_best = {\n        language: result.second_best.language,\n        re: result.second_best.relevance\n      };\n    }\n  }\n\n  /*\n  Updates highlight.js global options with values passed in the form of an object.\n  */\n  function configure(user_options) {\n    options = inherit(options, user_options);\n  }\n\n  /*\n  Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\n  */\n  function initHighlighting() {\n    if (initHighlighting.called)\n      return;\n    initHighlighting.called = true;\n\n    var blocks = document.querySelectorAll('pre code');\n    ArrayProto.forEach.call(blocks, highlightBlock);\n  }\n\n  /*\n  Attaches highlighting to the page load event.\n  */\n  function initHighlightingOnLoad() {\n    addEventListener('DOMContentLoaded', initHighlighting, false);\n    addEventListener('load', initHighlighting, false);\n  }\n\n  function registerLanguage(name, language) {\n    var lang = languages[name] = language(hljs);\n    if (lang.aliases) {\n      lang.aliases.forEach(function(alias) {aliases[alias] = name;});\n    }\n  }\n\n  function listLanguages() {\n    return objectKeys(languages);\n  }\n\n  function getLanguage(name) {\n    name = (name || '').toLowerCase();\n    return languages[name] || languages[aliases[name]];\n  }\n\n  /* Interface definition */\n\n  hljs.highlight = highlight;\n  hljs.highlightAuto = highlightAuto;\n  hljs.fixMarkup = fixMarkup;\n  hljs.highlightBlock = highlightBlock;\n  hljs.configure = configure;\n  hljs.initHighlighting = initHighlighting;\n  hljs.initHighlightingOnLoad = initHighlightingOnLoad;\n  hljs.registerLanguage = registerLanguage;\n  hljs.listLanguages = listLanguages;\n  hljs.getLanguage = getLanguage;\n  hljs.inherit = inherit;\n\n  // Common regexps\n  hljs.IDENT_RE = '[a-zA-Z]\\\\w*';\n  hljs.UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\\\w*';\n  hljs.NUMBER_RE = '\\\\b\\\\d+(\\\\.\\\\d+)?';\n  hljs.C_NUMBER_RE = '(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)'; // 0x..., 0..., decimal, float\n  hljs.BINARY_NUMBER_RE = '\\\\b(0b[01]+)'; // 0b...\n  hljs.RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~';\n\n  // Common modes\n  hljs.BACKSLASH_ESCAPE = {\n    begin: '\\\\\\\\[\\\\s\\\\S]', relevance: 0\n  };\n  hljs.APOS_STRING_MODE = {\n    className: 'string',\n    begin: '\\'', end: '\\'',\n    illegal: '\\\\n',\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n  hljs.QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: '\"', end: '\"',\n    illegal: '\\\\n',\n    contains: [hljs.BACKSLASH_ESCAPE]\n  };\n  hljs.PHRASAL_WORDS_MODE = {\n    begin: /\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/\n  };\n  hljs.COMMENT = function (begin, end, inherits) {\n    var mode = hljs.inherit(\n      {\n        className: 'comment',\n        begin: begin, end: end,\n        contains: []\n      },\n      inherits || {}\n    );\n    mode.contains.push(hljs.PHRASAL_WORDS_MODE);\n    mode.contains.push({\n      className: 'doctag',\n      begin: '(?:TODO|FIXME|NOTE|BUG|XXX):',\n      relevance: 0\n    });\n    return mode;\n  };\n  hljs.C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$');\n  hljs.C_BLOCK_COMMENT_MODE = hljs.COMMENT('/\\\\*', '\\\\*/');\n  hljs.HASH_COMMENT_MODE = hljs.COMMENT('#', '$');\n  hljs.NUMBER_MODE = {\n    className: 'number',\n    begin: hljs.NUMBER_RE,\n    relevance: 0\n  };\n  hljs.C_NUMBER_MODE = {\n    className: 'number',\n    begin: hljs.C_NUMBER_RE,\n    relevance: 0\n  };\n  hljs.BINARY_NUMBER_MODE = {\n    className: 'number',\n    begin: hljs.BINARY_NUMBER_RE,\n    relevance: 0\n  };\n  hljs.CSS_NUMBER_MODE = {\n    className: 'number',\n    begin: hljs.NUMBER_RE + '(' +\n      '%|em|ex|ch|rem'  +\n      '|vw|vh|vmin|vmax' +\n      '|cm|mm|in|pt|pc|px' +\n      '|deg|grad|rad|turn' +\n      '|s|ms' +\n      '|Hz|kHz' +\n      '|dpi|dpcm|dppx' +\n      ')?',\n    relevance: 0\n  };\n  hljs.REGEXP_MODE = {\n    className: 'regexp',\n    begin: /\\//, end: /\\/[gimuy]*/,\n    illegal: /\\n/,\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      {\n        begin: /\\[/, end: /\\]/,\n        relevance: 0,\n        contains: [hljs.BACKSLASH_ESCAPE]\n      }\n    ]\n  };\n  hljs.TITLE_MODE = {\n    className: 'title',\n    begin: hljs.IDENT_RE,\n    relevance: 0\n  };\n  hljs.UNDERSCORE_TITLE_MODE = {\n    className: 'title',\n    begin: hljs.UNDERSCORE_IDENT_RE,\n    relevance: 0\n  };\n  hljs.METHOD_GUARD = {\n    // excludes method names from keyword processing\n    begin: '\\\\.\\\\s*' + hljs.UNDERSCORE_IDENT_RE,\n    relevance: 0\n  };\n\n  return hljs;\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/highlight.js/lib/highlight.js\n// module id = 329\n// module chunks = 107818501498521","module.exports = function(hljs) {\n  var IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';\n  var KEYWORDS = {\n    keyword:\n      'in of if for while finally var new function do return void else break catch ' +\n      'instanceof with throw case default try this switch continue typeof delete ' +\n      'let yield const export super debugger as async await static ' +\n      // ECMAScript 6 modules import\n      'import from as'\n    ,\n    literal:\n      'true false null undefined NaN Infinity',\n    built_in:\n      'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' +\n      'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' +\n      'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' +\n      'TypeError URIError Number Math Date String RegExp Array Float32Array ' +\n      'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' +\n      'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' +\n      'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect ' +\n      'Promise'\n  };\n  var EXPRESSIONS;\n  var NUMBER = {\n    className: 'number',\n    variants: [\n      { begin: '\\\\b(0[bB][01]+)' },\n      { begin: '\\\\b(0[oO][0-7]+)' },\n      { begin: hljs.C_NUMBER_RE }\n    ],\n    relevance: 0\n  };\n  var SUBST = {\n    className: 'subst',\n    begin: '\\\\$\\\\{', end: '\\\\}',\n    keywords: KEYWORDS,\n    contains: []  // defined later\n  };\n  var TEMPLATE_STRING = {\n    className: 'string',\n    begin: '`', end: '`',\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      SUBST\n    ]\n  };\n  SUBST.contains = [\n    hljs.APOS_STRING_MODE,\n    hljs.QUOTE_STRING_MODE,\n    TEMPLATE_STRING,\n    NUMBER,\n    hljs.REGEXP_MODE\n  ]\n  var PARAMS_CONTAINS = SUBST.contains.concat([\n    hljs.C_BLOCK_COMMENT_MODE,\n    hljs.C_LINE_COMMENT_MODE\n  ]);\n\n  return {\n    aliases: ['js', 'jsx'],\n    keywords: KEYWORDS,\n    contains: [\n      {\n        className: 'meta',\n        relevance: 10,\n        begin: /^\\s*['\"]use (strict|asm)['\"]/\n      },\n      {\n        className: 'meta',\n        begin: /^#!/, end: /$/\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      TEMPLATE_STRING,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      NUMBER,\n      { // object attr container\n        begin: /[{,]\\s*/, relevance: 0,\n        contains: [\n          {\n            begin: IDENT_RE + '\\\\s*:', returnBegin: true,\n            relevance: 0,\n            contains: [{className: 'attr', begin: IDENT_RE, relevance: 0}]\n          }\n        ]\n      },\n      { // \"value\" container\n        begin: '(' + hljs.RE_STARTERS_RE + '|\\\\b(case|return|throw)\\\\b)\\\\s*',\n        keywords: 'return throw case',\n        contains: [\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          hljs.REGEXP_MODE,\n          {\n            className: 'function',\n            begin: '(\\\\(.*?\\\\)|' + IDENT_RE + ')\\\\s*=>', returnBegin: true,\n            end: '\\\\s*=>',\n            contains: [\n              {\n                className: 'params',\n                variants: [\n                  {\n                    begin: IDENT_RE\n                  },\n                  {\n                    begin: /\\(\\s*\\)/,\n                  },\n                  {\n                    begin: /\\(/, end: /\\)/,\n                    excludeBegin: true, excludeEnd: true,\n                    keywords: KEYWORDS,\n                    contains: PARAMS_CONTAINS\n                  }\n                ]\n              }\n            ]\n          },\n          { // E4X / JSX\n            begin: /</, end: /(\\/\\w+|\\w+\\/)>/,\n            subLanguage: 'xml',\n            contains: [\n              {begin: /<\\w+\\s*\\/>/, skip: true},\n              {\n                begin: /<\\w+/, end: /(\\/\\w+|\\w+\\/)>/, skip: true,\n                contains: [\n                  {begin: /<\\w+\\s*\\/>/, skip: true},\n                  'self'\n                ]\n              }\n            ]\n          }\n        ],\n        relevance: 0\n      },\n      {\n        className: 'function',\n        beginKeywords: 'function', end: /\\{/, excludeEnd: true,\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {begin: IDENT_RE}),\n          {\n            className: 'params',\n            begin: /\\(/, end: /\\)/,\n            excludeBegin: true,\n            excludeEnd: true,\n            contains: PARAMS_CONTAINS\n          }\n        ],\n        illegal: /\\[|%/\n      },\n      {\n        begin: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n      },\n      hljs.METHOD_GUARD,\n      { // ES6 class\n        className: 'class',\n        beginKeywords: 'class', end: /[{;=]/, excludeEnd: true,\n        illegal: /[:\"\\[\\]]/,\n        contains: [\n          {beginKeywords: 'extends'},\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      },\n      {\n        beginKeywords: 'constructor', end: /\\{/, excludeEnd: true\n      }\n    ],\n    illegal: /#(?!!)/\n  };\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/highlight.js/lib/languages/javascript.js\n// module id = 330\n// module chunks = 107818501498521","'use strict'\n\nvar high = require('highlight.js/lib/highlight.js')\nvar fault = require('fault')\n\n/* The lowlight interface, which has to be compatible\n * with highlight.js, as this object is passed to\n * highlight.js syntaxes. */\n\nfunction High() {}\n\nHigh.prototype = high\n\n/* Expose. */\nvar low = new High() // Ha!\n\nmodule.exports = low\n\nlow.highlight = highlight\nlow.highlightAuto = autoHighlight\nlow.registerLanguage = registerLanguage\nlow.getLanguage = getLanguage\n\nvar inherit = high.inherit\nvar own = {}.hasOwnProperty\nvar concat = [].concat\n\nvar defaultPrefix = 'hljs-'\nvar keyInsensitive = 'case_insensitive'\nvar keyCachedVariants = 'cached_variants'\nvar space = ' '\nvar pipe = '|'\n\nvar T_ELEMENT = 'element'\nvar T_TEXT = 'text'\nvar T_SPAN = 'span'\n\n/* Maps of syntaxes. */\nvar languageNames = []\nvar languages = {}\nvar aliases = {}\n\n/* Highlighting with language detection.  Accepts a string\n * with the code to highlight.  Returns an object with the\n * following properties:\n *\n * - language (detected language)\n * - relevance (int)\n * - value (a HAST tree with highlighting markup)\n * - secondBest (object with the same structure for\n *   second-best heuristically detected language, may\n *   be absent) */\nfunction autoHighlight(value, options) {\n  var settings = options || {}\n  var subset = settings.subset || languageNames\n  var prefix = settings.prefix\n  var length = subset.length\n  var index = -1\n  var result\n  var secondBest\n  var current\n  var name\n\n  if (prefix === null || prefix === undefined) {\n    prefix = defaultPrefix\n  }\n\n  if (typeof value !== 'string') {\n    throw fault('Expected `string` for value, got `%s`', value)\n  }\n\n  secondBest = normalize({})\n  result = normalize({})\n\n  while (++index < length) {\n    name = subset[index]\n\n    if (!getLanguage(name)) {\n      continue\n    }\n\n    current = normalize(coreHighlight(name, value, false, prefix))\n\n    current.language = name\n\n    if (current.relevance > secondBest.relevance) {\n      secondBest = current\n    }\n\n    if (current.relevance > result.relevance) {\n      secondBest = result\n      result = current\n    }\n  }\n\n  if (secondBest.language) {\n    result.secondBest = secondBest\n  }\n\n  return result\n}\n\n/* Highlighting `value` in the language `language`. */\nfunction highlight(language, value, options) {\n  var settings = options || {}\n  var prefix = settings.prefix\n\n  if (prefix === null || prefix === undefined) {\n    prefix = defaultPrefix\n  }\n\n  return normalize(coreHighlight(language, value, true, prefix))\n}\n\n/* Register a language. */\nfunction registerLanguage(name, syntax) {\n  var lang = syntax(low)\n  var values = lang.aliases\n  var length = values && values.length\n  var index = -1\n\n  languages[name] = lang\n\n  languageNames.push(name)\n\n  while (++index < length) {\n    aliases[values[index]] = name\n  }\n}\n\n/* Core highlighting function.  Accepts a language name, or\n * an alias, and a string with the code to highlight.\n * Returns an object with the following properties: */\nfunction coreHighlight(name, value, ignore, prefix, continuation) {\n  var continuations = {}\n  var stack = []\n  var modeBuffer = ''\n  var relevance = 0\n  var language\n  var top\n  var current\n  var currentChildren\n  var offset\n  var count\n  var match\n  var children\n\n  if (typeof name !== 'string') {\n    throw fault('Expected `string` for name, got `%s`', name)\n  }\n\n  if (typeof value !== 'string') {\n    throw fault('Expected `string` for value, got `%s`', value)\n  }\n\n  language = getLanguage(name)\n  top = continuation || language\n  children = []\n\n  current = top\n  currentChildren = children\n\n  if (!language) {\n    throw fault('Unknown language: `%s` is not registered', name)\n  }\n\n  compileLanguage(language)\n\n  try {\n    top.terminators.lastIndex = 0\n    offset = 0\n    match = top.terminators.exec(value)\n\n    while (match) {\n      count = processLexeme(value.substring(offset, match.index), match[0])\n      offset = match.index + count\n      top.terminators.lastIndex = offset\n      match = top.terminators.exec(value)\n    }\n\n    processLexeme(value.substr(offset))\n    current = top\n\n    while (current.parent) {\n      if (current.className) {\n        pop()\n      }\n\n      current = current.parent\n    }\n\n    return {\n      relevance: relevance,\n      value: currentChildren,\n      language: name,\n      top: top\n    }\n  } catch (err) {\n    /* istanbul ignore if - Catch-all  */\n    if (err.message.indexOf('Illegal') === -1) {\n      throw err\n    }\n\n    return {relevance: 0, value: addText(value, [])}\n  }\n\n  /* Process a lexeme.  Returns next position. */\n  function processLexeme(buffer, lexeme) {\n    var newMode\n    var endMode\n    var origin\n\n    modeBuffer += buffer\n\n    if (lexeme === undefined) {\n      addSiblings(processBuffer(), currentChildren)\n\n      return 0\n    }\n\n    newMode = subMode(lexeme, top)\n\n    if (newMode) {\n      addSiblings(processBuffer(), currentChildren)\n\n      startNewMode(newMode, lexeme)\n\n      return newMode.returnBegin ? 0 : lexeme.length\n    }\n\n    endMode = endOfMode(top, lexeme)\n\n    if (endMode) {\n      origin = top\n\n      if (!(origin.returnEnd || origin.excludeEnd)) {\n        modeBuffer += lexeme\n      }\n\n      addSiblings(processBuffer(), currentChildren)\n\n      /* Close open modes. */\n      do {\n        if (top.className) {\n          pop()\n        }\n\n        relevance += top.relevance\n        top = top.parent\n      } while (top !== endMode.parent)\n\n      if (origin.excludeEnd) {\n        addText(lexeme, currentChildren)\n      }\n\n      modeBuffer = ''\n\n      if (endMode.starts) {\n        startNewMode(endMode.starts, '')\n      }\n\n      return origin.returnEnd ? 0 : lexeme.length\n    }\n\n    if (isIllegal(lexeme, top)) {\n      throw fault(\n        'Illegal lexeme \"%s\" for mode \"%s\"',\n        lexeme,\n        top.className || '<unnamed>'\n      )\n    }\n\n    /* Parser should not reach this point as all\n     * types of lexemes should be caught earlier,\n     * but if it does due to some bug make sure it\n     * advances at least one character forward to\n     * prevent infinite looping. */\n    modeBuffer += lexeme\n\n    return lexeme.length || /* istanbul ignore next */ 1\n  }\n\n  /* Start a new mode with a `lexeme` to process. */\n  function startNewMode(mode, lexeme) {\n    var node\n\n    if (mode.className) {\n      node = build(mode.className, [])\n    }\n\n    if (mode.returnBegin) {\n      modeBuffer = ''\n    } else if (mode.excludeBegin) {\n      addText(lexeme, currentChildren)\n\n      modeBuffer = ''\n    } else {\n      modeBuffer = lexeme\n    }\n\n    /* Enter a new mode. */\n    if (node) {\n      currentChildren.push(node)\n      stack.push(currentChildren)\n      currentChildren = node.children\n    }\n\n    top = Object.create(mode, {parent: {value: top}})\n  }\n\n  /* Process the buffer. */\n  function processBuffer() {\n    var result = top.subLanguage ? processSubLanguage() : processKeywords()\n    modeBuffer = ''\n    return result\n  }\n\n  /* Process a sublanguage (returns a list of nodes). */\n  function processSubLanguage() {\n    var explicit = typeof top.subLanguage === 'string'\n    var subvalue\n\n    /* istanbul ignore if - support non-loaded sublanguages */\n    if (explicit && !languages[top.subLanguage]) {\n      return addText(modeBuffer, [])\n    }\n\n    if (explicit) {\n      subvalue = coreHighlight(\n        top.subLanguage,\n        modeBuffer,\n        true,\n        prefix,\n        continuations[top.subLanguage]\n      )\n    } else {\n      subvalue = autoHighlight(modeBuffer, {\n        subset: top.subLanguage.length ? top.subLanguage : undefined,\n        prefix: prefix\n      })\n    }\n\n    /* Counting embedded language score towards the\n     * host language may be disabled with zeroing the\n     * containing mode relevance.  Usecase in point is\n     * Markdown that allows XML everywhere and makes\n     * every XML snippet to have a much larger Markdown\n     * score. */\n    if (top.relevance > 0) {\n      relevance += subvalue.relevance\n    }\n\n    if (explicit) {\n      continuations[top.subLanguage] = subvalue.top\n    }\n\n    return [build(subvalue.language, subvalue.value, true)]\n  }\n\n  /* Process keywords. Returns nodes. */\n  function processKeywords() {\n    var nodes = []\n    var lastIndex\n    var keyword\n    var node\n    var submatch\n\n    if (!top.keywords) {\n      return addText(modeBuffer, nodes)\n    }\n\n    lastIndex = 0\n\n    top.lexemesRe.lastIndex = 0\n\n    keyword = top.lexemesRe.exec(modeBuffer)\n\n    while (keyword) {\n      addText(modeBuffer.substring(lastIndex, keyword.index), nodes)\n\n      submatch = keywordMatch(top, keyword)\n\n      if (submatch) {\n        relevance += submatch[1]\n\n        node = build(submatch[0], [])\n\n        nodes.push(node)\n\n        addText(keyword[0], node.children)\n      } else {\n        addText(keyword[0], nodes)\n      }\n\n      lastIndex = top.lexemesRe.lastIndex\n      keyword = top.lexemesRe.exec(modeBuffer)\n    }\n\n    addText(modeBuffer.substr(lastIndex), nodes)\n\n    return nodes\n  }\n\n  /* Add siblings. */\n  function addSiblings(siblings, nodes) {\n    var length = siblings.length\n    var index = -1\n    var sibling\n\n    while (++index < length) {\n      sibling = siblings[index]\n\n      if (sibling.type === T_TEXT) {\n        addText(sibling.value, nodes)\n      } else {\n        nodes.push(sibling)\n      }\n    }\n  }\n\n  /* Add a text. */\n  function addText(value, nodes) {\n    var tail\n\n    if (value) {\n      tail = nodes[nodes.length - 1]\n\n      if (tail && tail.type === T_TEXT) {\n        tail.value += value\n      } else {\n        nodes.push(buildText(value))\n      }\n    }\n\n    return nodes\n  }\n\n  /* Build a text. */\n  function buildText(value) {\n    return {type: T_TEXT, value: value}\n  }\n\n  /* Build a span. */\n  function build(name, contents, noPrefix) {\n    return {\n      type: T_ELEMENT,\n      tagName: T_SPAN,\n      properties: {\n        className: [(noPrefix ? '' : prefix) + name]\n      },\n      children: contents\n    }\n  }\n\n  /* Check if the first word in `keywords` is a keyword. */\n  function keywordMatch(mode, keywords) {\n    var keyword = keywords[0]\n\n    if (language[keyInsensitive]) {\n      keyword = keyword.toLowerCase()\n    }\n\n    return own.call(mode.keywords, keyword) && mode.keywords[keyword]\n  }\n\n  /* Check if `lexeme` is illegal according to `mode`. */\n  function isIllegal(lexeme, mode) {\n    return !ignore && test(mode.illegalRe, lexeme)\n  }\n\n  /* Check if `lexeme` ends `mode`. */\n  function endOfMode(mode, lexeme) {\n    if (test(mode.endRe, lexeme)) {\n      while (mode.endsParent && mode.parent) {\n        mode = mode.parent\n      }\n\n      return mode\n    }\n\n    if (mode.endsWithParent) {\n      return endOfMode(mode.parent, lexeme)\n    }\n  }\n\n  /* Check a sub-mode. */\n  function subMode(lexeme, mode) {\n    var values = mode.contains\n    var length = values.length\n    var index = -1\n\n    while (++index < length) {\n      if (test(values[index].beginRe, lexeme)) {\n        return values[index]\n      }\n    }\n  }\n\n  /* Exit the current context. */\n  function pop() {\n    /* istanbul ignore next - removed in hljs 9.3 */\n    currentChildren = stack.pop() || children\n  }\n}\n\nfunction expandMode(mode) {\n  var length\n  var index\n  var variants\n  var result\n\n  if (mode.variants && !mode[keyCachedVariants]) {\n    variants = mode.variants\n    length = variants.length\n    index = -1\n    result = []\n\n    while (++index < length) {\n      result[index] = inherit(mode, {variants: null}, variants[index])\n    }\n\n    mode[keyCachedVariants] = result\n  }\n\n  return (\n    mode[keyCachedVariants] || (mode.endsWithParent ? [inherit(mode)] : [mode])\n  )\n}\n\n/* Compile a language. */\nfunction compileLanguage(language) {\n  compileMode(language)\n\n  /* Compile a language mode, optionally with a parent. */\n  function compileMode(mode, parent) {\n    var compiledKeywords = {}\n    var terminators\n\n    if (mode.compiled) {\n      return\n    }\n\n    mode.compiled = true\n\n    mode.keywords = mode.keywords || mode.beginKeywords\n\n    if (mode.keywords) {\n      if (typeof mode.keywords === 'string') {\n        flatten('keyword', mode.keywords)\n      } else {\n        Object.keys(mode.keywords).forEach(function(className) {\n          flatten(className, mode.keywords[className])\n        })\n      }\n\n      mode.keywords = compiledKeywords\n    }\n\n    mode.lexemesRe = langRe(mode.lexemes || /\\w+/, true)\n\n    if (parent) {\n      if (mode.beginKeywords) {\n        mode.begin =\n          '\\\\b(' + mode.beginKeywords.split(space).join(pipe) + ')\\\\b'\n      }\n\n      if (!mode.begin) {\n        mode.begin = /\\B|\\b/\n      }\n\n      mode.beginRe = langRe(mode.begin)\n\n      if (!mode.end && !mode.endsWithParent) {\n        mode.end = /\\B|\\b/\n      }\n\n      if (mode.end) {\n        mode.endRe = langRe(mode.end)\n      }\n\n      mode.terminatorEnd = source(mode.end) || ''\n\n      if (mode.endsWithParent && parent.terminatorEnd) {\n        mode.terminatorEnd += (mode.end ? pipe : '') + parent.terminatorEnd\n      }\n    }\n\n    if (mode.illegal) {\n      mode.illegalRe = langRe(mode.illegal)\n    }\n\n    if (mode.relevance === undefined) {\n      mode.relevance = 1\n    }\n\n    if (!mode.contains) {\n      mode.contains = []\n    }\n\n    mode.contains = concat.apply(\n      [],\n      mode.contains.map(function(c) {\n        return expandMode(c === 'self' ? mode : c)\n      })\n    )\n\n    mode.contains.forEach(function(c) {\n      compileMode(c, mode)\n    })\n\n    if (mode.starts) {\n      compileMode(mode.starts, parent)\n    }\n\n    terminators = mode.contains\n      .map(map)\n      .concat([mode.terminatorEnd, mode.illegal])\n      .map(source)\n      .filter(Boolean)\n\n    mode.terminators = terminators.length\n      ? langRe(terminators.join(pipe), true)\n      : {exec: execNoop}\n\n    function map(c) {\n      return c.beginKeywords ? '\\\\.?(' + c.begin + ')\\\\.?' : c.begin\n    }\n\n    /* Flatten a classname. */\n    function flatten(className, value) {\n      var pairs\n      var pair\n      var index\n      var length\n\n      if (language[keyInsensitive]) {\n        value = value.toLowerCase()\n      }\n\n      pairs = value.split(space)\n      length = pairs.length\n      index = -1\n\n      while (++index < length) {\n        pair = pairs[index].split(pipe)\n\n        compiledKeywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1]\n      }\n    }\n  }\n\n  /* Create a regex for `value`. */\n  function langRe(value, global) {\n    return new RegExp(\n      source(value),\n      'm' + (language[keyInsensitive] ? 'i' : '') + (global ? 'g' : '')\n    )\n  }\n\n  /* Get the source of an expression or string. */\n  function source(re) {\n    return (re && re.source) || re\n  }\n}\n\n/* Normalize a syntax result. */\nfunction normalize(result) {\n  return {\n    relevance: result.relevance || 0,\n    language: result.language || null,\n    value: result.value || []\n  }\n}\n\n/* Check if `expression` matches `lexeme`. */\nfunction test(expression, lexeme) {\n  var match = expression && expression.exec(lexeme)\n  return match && match.index === 0\n}\n\n/* No-op exec. */\nfunction execNoop() {\n  return null\n}\n\n/* Get a language by `name`. */\nfunction getLanguage(name) {\n  name = name.toLowerCase()\n\n  return languages[name] || languages[aliases[name]]\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lowlight/lib/core.js\n// module id = 345\n// module chunks = 107818501498521","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nexports.createStyleObject = createStyleObject;\nexports.createClassNameString = createClassNameString;\nexports.createChildren = createChildren;\nexports.default = createElement;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createStyleObject(classNames) {\n  var elementStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var stylesheet = arguments[2];\n\n  return classNames.reduce(function (styleObject, className) {\n    return (0, _extends3.default)({}, styleObject, stylesheet[className]);\n  }, elementStyle);\n}\n\nfunction createClassNameString(classNames) {\n  return classNames.join(' ');\n}\n\nfunction createChildren(stylesheet, useInlineStyles) {\n  var childrenCount = 0;\n  return function (children) {\n    childrenCount += 1;\n    return children.map(function (child, i) {\n      return createElement({\n        node: child,\n        stylesheet: stylesheet,\n        useInlineStyles: useInlineStyles,\n        key: 'code-segment-' + childrenCount + '-' + i\n      });\n    });\n  };\n}\n\nfunction createElement(_ref) {\n  var node = _ref.node,\n      stylesheet = _ref.stylesheet,\n      _ref$style = _ref.style,\n      style = _ref$style === undefined ? {} : _ref$style,\n      useInlineStyles = _ref.useInlineStyles,\n      key = _ref.key;\n  var properties = node.properties,\n      type = node.type,\n      TagName = node.tagName,\n      value = node.value;\n\n  if (type === 'text') {\n    return value;\n  } else if (TagName) {\n    var childrenCreator = createChildren(stylesheet, useInlineStyles);\n    var props = useInlineStyles ? {\n      style: createStyleObject(properties.className, (0, _assign2.default)({}, properties.style, style), stylesheet)\n    } : { className: createClassNameString(properties.className) };\n    var children = childrenCreator(node.children);\n    return _react2.default.createElement(\n      TagName,\n      (0, _extends3.default)({ key: key }, props),\n      children\n    );\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/react-syntax-highlighter/dist/create-element.js\n// module id = 436\n// module chunks = 107818501498521","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nexports.default = function (lowlight, defaultStyle) {\n  return function SyntaxHighlighter(_ref5) {\n    var language = _ref5.language,\n        children = _ref5.children,\n        _ref5$style = _ref5.style,\n        style = _ref5$style === undefined ? defaultStyle : _ref5$style,\n        _ref5$customStyle = _ref5.customStyle,\n        customStyle = _ref5$customStyle === undefined ? {} : _ref5$customStyle,\n        _ref5$codeTagProps = _ref5.codeTagProps,\n        codeTagProps = _ref5$codeTagProps === undefined ? {} : _ref5$codeTagProps,\n        _ref5$useInlineStyles = _ref5.useInlineStyles,\n        useInlineStyles = _ref5$useInlineStyles === undefined ? true : _ref5$useInlineStyles,\n        _ref5$showLineNumbers = _ref5.showLineNumbers,\n        showLineNumbers = _ref5$showLineNumbers === undefined ? false : _ref5$showLineNumbers,\n        _ref5$startingLineNum = _ref5.startingLineNumber,\n        startingLineNumber = _ref5$startingLineNum === undefined ? 1 : _ref5$startingLineNum,\n        lineNumberContainerStyle = _ref5.lineNumberContainerStyle,\n        lineNumberStyle = _ref5.lineNumberStyle,\n        wrapLines = _ref5.wrapLines,\n        _ref5$lineStyle = _ref5.lineStyle,\n        lineStyle = _ref5$lineStyle === undefined ? {} : _ref5$lineStyle,\n        renderer = _ref5.renderer,\n        _ref5$PreTag = _ref5.PreTag,\n        PreTag = _ref5$PreTag === undefined ? 'pre' : _ref5$PreTag,\n        _ref5$CodeTag = _ref5.CodeTag,\n        CodeTag = _ref5$CodeTag === undefined ? 'code' : _ref5$CodeTag,\n        _ref5$code = _ref5.code,\n        code = _ref5$code === undefined ? Array.isArray(children) ? children[0] : children : _ref5$code,\n        rest = (0, _objectWithoutProperties3.default)(_ref5, ['language', 'children', 'style', 'customStyle', 'codeTagProps', 'useInlineStyles', 'showLineNumbers', 'startingLineNumber', 'lineNumberContainerStyle', 'lineNumberStyle', 'wrapLines', 'lineStyle', 'renderer', 'PreTag', 'CodeTag', 'code']);\n\n    /* \n     * some custom renderers rely on individual row elements so we need to turn wrapLines on \n     * if renderer is provided and wrapLines is undefined\n    */\n    wrapLines = renderer && wrapLines === undefined ? true : wrapLines;\n    renderer = renderer || defaultRenderer;\n    var codeTree = language && !!lowlight.getLanguage(language) ? lowlight.highlight(language, code) : lowlight.highlightAuto(code);\n    if (codeTree.language === null || language === 'text') {\n      codeTree.value = [{ type: 'text', value: code }];\n    }\n    var defaultPreStyle = style.hljs || { backgroundColor: '#fff' };\n    var preProps = useInlineStyles ? (0, _assign2.default)({}, rest, { style: (0, _assign2.default)({}, defaultPreStyle, customStyle) }) : (0, _assign2.default)({}, rest, { className: 'hljs' });\n\n    var tree = wrapLines ? wrapLinesInSpan(codeTree, lineStyle) : codeTree.value;\n    var lineNumbers = showLineNumbers ? _react2.default.createElement(LineNumbers, {\n      containerStyle: lineNumberContainerStyle,\n      numberStyle: lineNumberStyle,\n      startingLineNumber: startingLineNumber,\n      codeString: code\n    }) : null;\n    return _react2.default.createElement(\n      PreTag,\n      preProps,\n      lineNumbers,\n      _react2.default.createElement(\n        CodeTag,\n        codeTagProps,\n        renderer({ rows: tree, stylesheet: style, useInlineStyles: useInlineStyles })\n      )\n    );\n  };\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _createElement = require('./create-element');\n\nvar _createElement2 = _interopRequireDefault(_createElement);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar newLineRegex = /\\n/g;\nfunction getNewLines(str) {\n  return str.match(newLineRegex);\n}\n\nfunction getLineNumbers(_ref) {\n  var lines = _ref.lines,\n      startingLineNumber = _ref.startingLineNumber,\n      style = _ref.style;\n\n  return lines.map(function (_, i) {\n    var number = i + startingLineNumber;\n    return _react2.default.createElement(\n      'span',\n      {\n        key: 'line-' + i,\n        className: 'react-syntax-highlighter-line-number',\n        style: typeof style === 'function' ? style(number) : style\n      },\n      number + '\\n'\n    );\n  });\n}\n\nfunction LineNumbers(_ref2) {\n  var codeString = _ref2.codeString,\n      _ref2$containerStyle = _ref2.containerStyle,\n      containerStyle = _ref2$containerStyle === undefined ? { float: 'left', paddingRight: '10px' } : _ref2$containerStyle,\n      _ref2$numberStyle = _ref2.numberStyle,\n      numberStyle = _ref2$numberStyle === undefined ? {} : _ref2$numberStyle,\n      startingLineNumber = _ref2.startingLineNumber;\n\n  return _react2.default.createElement(\n    'code',\n    { style: containerStyle },\n    getLineNumbers({\n      lines: codeString.replace(/\\n$/, '').split('\\n'),\n      style: numberStyle,\n      startingLineNumber: startingLineNumber\n    })\n  );\n}\n\nfunction createLineElement(_ref3) {\n  var children = _ref3.children,\n      lineNumber = _ref3.lineNumber,\n      lineStyle = _ref3.lineStyle,\n      _ref3$className = _ref3.className,\n      className = _ref3$className === undefined ? [] : _ref3$className;\n\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: {\n      className: className,\n      style: typeof lineStyle === 'function' ? lineStyle(lineNumber) : lineStyle\n    },\n    children: children\n  };\n}\n\nfunction flattenCodeTree(tree) {\n  var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var newTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n    if (node.type === 'text') {\n      newTree.push(createLineElement({\n        children: [node],\n        className: className\n      }));\n    } else if (node.children) {\n      var classNames = className.concat(node.properties.className);\n      newTree = newTree.concat(flattenCodeTree(node.children, classNames));\n    }\n  }\n  return newTree;\n}\n\nfunction wrapLinesInSpan(codeTree, lineStyle) {\n  var tree = flattenCodeTree(codeTree.value);\n  var newTree = [];\n  var lastLineBreakIndex = -1;\n  var index = 0;\n\n  var _loop = function _loop() {\n    var node = tree[index];\n    var value = node.children[0].value;\n    var newLines = getNewLines(value);\n    if (newLines) {\n      (function () {\n        var splitValue = value.split('\\n');\n        splitValue.forEach(function (text, i) {\n          var lineNumber = newTree.length + 1;\n          var newChild = { type: 'text', value: text + '\\n' };\n          if (i === 0) {\n            var _children = tree.slice(lastLineBreakIndex + 1, index).concat(createLineElement({ children: [newChild], className: node.properties.className }));\n            newTree.push(createLineElement({ children: _children, lineNumber: lineNumber, lineStyle: lineStyle }));\n          } else if (i === splitValue.length - 1) {\n            var stringChild = tree[index + 1] && tree[index + 1].children && tree[index + 1].children[0];\n            if (stringChild) {\n              var lastLineInPreviousSpan = { type: 'text', value: '' + text };\n              var newElem = createLineElement({ children: [lastLineInPreviousSpan], className: node.properties.className });\n              tree.splice(index + 1, 0, newElem);\n            } else {\n              newTree.push(createLineElement({ children: [newChild], lineNumber: lineNumber, lineStyle: lineStyle }));\n            }\n          } else {\n            newTree.push(createLineElement({ children: [newChild], lineNumber: lineNumber, lineStyle: lineStyle }));\n          }\n        });\n        lastLineBreakIndex = index;\n      })();\n    }\n    index++;\n  };\n\n  while (index < tree.length) {\n    _loop();\n  }\n  if (lastLineBreakIndex !== tree.length - 1) {\n    var children = tree.slice(lastLineBreakIndex + 1, tree.length);\n    if (children && children.length) {\n      newTree.push(createLineElement({ children: children, lineNumber: newTree.length + 1, lineStyle: lineStyle }));\n    }\n  }\n  return newTree;\n}\n\nfunction defaultRenderer(_ref4) {\n  var rows = _ref4.rows,\n      stylesheet = _ref4.stylesheet,\n      useInlineStyles = _ref4.useInlineStyles;\n\n  return rows.map(function (node, i) {\n    return (0, _createElement2.default)({\n      node: node,\n      stylesheet: stylesheet,\n      useInlineStyles: useInlineStyles,\n      key: 'code-segement' + i\n    });\n  });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/react-syntax-highlighter/dist/highlight.js\n// module id = 437\n// module chunks = 107818501498521","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _javascript = require(\"highlight.js/lib/languages/javascript\");\n\nvar _javascript2 = _interopRequireDefault(_javascript);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _javascript2.default;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/react-syntax-highlighter/dist/languages/javascript.js\n// module id = 438\n// module chunks = 107818501498521","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.registerLanguage = undefined;\n\nvar _highlight = require('./highlight');\n\nvar _highlight2 = _interopRequireDefault(_highlight);\n\nvar _core = require('lowlight/lib/core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar registerLanguage = exports.registerLanguage = _core2.default.registerLanguage;\nexports.default = (0, _highlight2.default)(_core2.default, {});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/react-syntax-highlighter/dist/light.js\n// module id = 439\n// module chunks = 107818501498521","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = {\n    \"hljs\": {\n        \"display\": \"block\",\n        \"overflowX\": \"auto\",\n        \"padding\": \"0.5em\",\n        \"color\": \"#000\",\n        \"background\": \"#f8f8ff\"\n    },\n    \"hljs-comment\": {\n        \"color\": \"#408080\",\n        \"fontStyle\": \"italic\"\n    },\n    \"hljs-quote\": {\n        \"color\": \"#408080\",\n        \"fontStyle\": \"italic\"\n    },\n    \"hljs-keyword\": {\n        \"color\": \"#954121\"\n    },\n    \"hljs-selector-tag\": {\n        \"color\": \"#954121\"\n    },\n    \"hljs-literal\": {\n        \"color\": \"#954121\"\n    },\n    \"hljs-subst\": {\n        \"color\": \"#954121\"\n    },\n    \"hljs-number\": {\n        \"color\": \"#40a070\"\n    },\n    \"hljs-string\": {\n        \"color\": \"#219161\"\n    },\n    \"hljs-doctag\": {\n        \"color\": \"#219161\"\n    },\n    \"hljs-selector-id\": {\n        \"color\": \"#19469d\"\n    },\n    \"hljs-selector-class\": {\n        \"color\": \"#19469d\"\n    },\n    \"hljs-section\": {\n        \"color\": \"#19469d\"\n    },\n    \"hljs-type\": {\n        \"color\": \"#19469d\"\n    },\n    \"hljs-params\": {\n        \"color\": \"#00f\"\n    },\n    \"hljs-title\": {\n        \"color\": \"#458\",\n        \"fontWeight\": \"bold\"\n    },\n    \"hljs-tag\": {\n        \"color\": \"#000080\",\n        \"fontWeight\": \"normal\"\n    },\n    \"hljs-name\": {\n        \"color\": \"#000080\",\n        \"fontWeight\": \"normal\"\n    },\n    \"hljs-attribute\": {\n        \"color\": \"#000080\",\n        \"fontWeight\": \"normal\"\n    },\n    \"hljs-variable\": {\n        \"color\": \"#008080\"\n    },\n    \"hljs-template-variable\": {\n        \"color\": \"#008080\"\n    },\n    \"hljs-regexp\": {\n        \"color\": \"#b68\"\n    },\n    \"hljs-link\": {\n        \"color\": \"#b68\"\n    },\n    \"hljs-symbol\": {\n        \"color\": \"#990073\"\n    },\n    \"hljs-bullet\": {\n        \"color\": \"#990073\"\n    },\n    \"hljs-built_in\": {\n        \"color\": \"#0086b3\"\n    },\n    \"hljs-builtin-name\": {\n        \"color\": \"#0086b3\"\n    },\n    \"hljs-meta\": {\n        \"color\": \"#999\",\n        \"fontWeight\": \"bold\"\n    },\n    \"hljs-deletion\": {\n        \"background\": \"#fdd\"\n    },\n    \"hljs-addition\": {\n        \"background\": \"#dfd\"\n    },\n    \"hljs-emphasis\": {\n        \"fontStyle\": \"italic\"\n    },\n    \"hljs-strong\": {\n        \"fontWeight\": \"bold\"\n    }\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/react-syntax-highlighter/dist/styles/docco.js\n// module id = 440\n// module chunks = 107818501498521","import React from \"react\"\nimport Link from \"gatsby-link\"\nimport * as PropTypes from \"prop-types\"\nimport SyntaxHighlighter, { registerLanguage } from \"react-syntax-highlighter/dist/light\";\nimport js from 'react-syntax-highlighter/dist/languages/javascript';\nimport docco from 'react-syntax-highlighter/dist/styles/docco';\n\nregisterLanguage('javascript', js);\n\nconst propTypes = {\n  data: PropTypes.object.isRequired,\n}\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const blogPost = this.props.data.contentfulBlogPost\n    const {\n      postTitle,\n      datePosted,\n      postContent,\n      author,\n      postSlug,\n      contentPreview\n    } = blogPost\n    const codeTest = '(num) => num + 1;'\n    return (\n      <div>\n        <div\n          style={{\n            display: `flex`,\n            alignItems: `center`,\n          }}\n        >\n          <h4>\n            {postTitle}\n          </h4>\n        </div>\n        <div>\n          <p>\n            {author.name}\n            <img src={author.avatar.responsiveResolution.src} />\n          </p>\n        </div>\n        <div>\n          <span>\n            Date Posted: {datePosted}\n          </span>\n          <div\n            dangerouslySetInnerHTML={{\n              __html: postContent.childMarkdownRemark.html,\n            }}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nBlogPostTemplate.propTypes = propTypes\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query blogPostQuery($postSlug: String!) {\n    contentfulBlogPost(postSlug: { eq: $postSlug }) {\n      id\n      postTitle\n      postContent {\n        childMarkdownRemark {\n          html\n        }\n      }\n      datePosted\n      author {\n        name\n        avatar {\n          id\n          responsiveResolution(width: 60, height: 60) {\n            src\n          }\n        }\n      }\n      postSlug,\n      contentPreview {\n        childMarkdownRemark {\n          html\n        }\n      }\n    }\n  }\n`\n\n\n// WEBPACK FOOTER //\n// ./src/templates/blogPost.js"],"sourceRoot":""}